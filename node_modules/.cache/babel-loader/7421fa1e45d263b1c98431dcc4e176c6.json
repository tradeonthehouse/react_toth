{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"changeMonth\", \"components\", \"componentsProps\", \"date\", \"leftArrowButtonText\", \"maxDate\", \"minDate\", \"onChange\", \"renderDay\", \"rightArrowButtonText\"];\nimport * as React from 'react';\nimport PickersCalendarHeader from '../CalendarPicker/PickersCalendarHeader';\nimport DateRangePickerDay from '../DateRangePickerDay';\nimport { useUtils } from '../internal/pickers/hooks/useUtils';\nimport PickersCalendar from '../CalendarPicker/PickersCalendar';\nimport { defaultMinDate, defaultMaxDate } from '../internal/pickers/constants/prop-types';\nimport { isWithinRange, isStartOfRange, isEndOfRange } from '../internal/pickers/date-utils';\nimport { doNothing } from '../internal/pickers/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst onlyDayView = ['day'];\n/**\r\n * @ignore - internal component.\r\n */\n\nexport function DateRangePickerViewMobile(props) {\n  const {\n      changeMonth,\n      components,\n      componentsProps,\n      date,\n      leftArrowButtonText,\n      maxDate: maxDateProp,\n      minDate: minDateProp,\n      onChange,\n      renderDay = (_, dayProps) => /*#__PURE__*/_jsx(DateRangePickerDay, _extends({}, dayProps)),\n      rightArrowButtonText\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const utils = useUtils();\n  const minDate = minDateProp || utils.date(defaultMinDate);\n  const maxDate = maxDateProp || utils.date(defaultMaxDate);\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(PickersCalendarHeader, _extends({\n      components: components,\n      componentsProps: componentsProps,\n      leftArrowButtonText: leftArrowButtonText,\n      maxDate: maxDate,\n      minDate: minDate,\n      onMonthChange: changeMonth,\n      openView: \"day\",\n      rightArrowButtonText: rightArrowButtonText,\n      views: onlyDayView\n    }, other)), /*#__PURE__*/_jsx(PickersCalendar, _extends({}, other, {\n      date: date,\n      onChange: onChange,\n      onFocusedDayChange: doNothing,\n      renderDay: (day, _, DayProps) => renderDay(day, _extends({\n        isPreviewing: false,\n        isStartOfPreviewing: false,\n        isEndOfPreviewing: false,\n        isHighlighting: isWithinRange(utils, day, date),\n        isStartOfHighlighting: isStartOfRange(utils, day, date),\n        isEndOfHighlighting: isEndOfRange(utils, day, date)\n      }, DayProps))\n    }))]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}