{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"onChange\", \"PopperProps\", \"ToolbarComponent\", \"TransitionComponent\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDateTimePickerDefaultizedProps } from '../DateTimePicker/shared';\nimport DateTimePickerToolbar from '../DateTimePicker/DateTimePickerToolbar';\nimport DesktopWrapper from '../internal/pickers/wrappers/DesktopWrapper';\nimport Picker from '../internal/pickers/Picker/Picker';\nimport { useDateTimeValidation } from '../internal/pickers/hooks/useValidation';\nimport { parsePickerInputValue } from '../internal/pickers/date-utils';\nimport { KeyboardDateInput } from '../internal/pickers/KeyboardDateInput';\nimport { usePickerState } from '../internal/pickers/hooks/usePickerState';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst valueManager = {\n  emptyValue: null,\n  parseInput: parsePickerInputValue,\n  areValuesEqual: (utils, a, b) => utils.isEqual(a, b)\n};\n\n/**\r\n *\r\n * Demos:\r\n *\r\n * - [Date Time Picker](https://material-ui.com/components/date-time-picker/)\r\n *\r\n * API:\r\n *\r\n * - [DesktopDateTimePicker API](https://material-ui.com/api/desktop-date-time-picker/)\r\n */\nconst DesktopDateTimePicker = /*#__PURE__*/React.forwardRef(function DesktopDateTimePicker(inProps, ref) {\n  // TODO: TDate needs to be instantiated at every usage.\n  const props = useDateTimePickerDefaultizedProps(inProps, 'MuiDesktopDateTimePicker');\n  const validationError = useDateTimeValidation(props) !== null;\n  const {\n    pickerProps,\n    inputProps,\n    wrapperProps\n  } = usePickerState(props, valueManager);\n  const {\n      PopperProps,\n      ToolbarComponent = DateTimePickerToolbar,\n      TransitionComponent\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const AllDateInputProps = _extends({}, inputProps, other, {\n    ref,\n    validationError\n  });\n  return /*#__PURE__*/_jsx(DesktopWrapper, _extends({}, wrapperProps, {\n    DateInputProps: AllDateInputProps,\n    KeyboardDateInputComponent: KeyboardDateInput,\n    PopperProps: PopperProps,\n    TransitionComponent: TransitionComponent,\n    children: /*#__PURE__*/_jsx(Picker, _extends({}, pickerProps, {\n      autoFocus: true,\n      toolbarTitle: props.label || props.toolbarTitle,\n      ToolbarComponent: ToolbarComponent,\n      DateInputProps: AllDateInputProps\n    }, other))\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? DesktopDateTimePicker.propTypes\n/* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\r\n   * Regular expression to detect \"accepted\" symbols.\r\n   * @default /\\dap/gi\r\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n  /**\r\n   * If `true`, `onChange` is fired on click even if the same date is selected.\r\n   * @default false\r\n   */\n  allowSameDateSelection: PropTypes.bool,\n  /**\r\n   * 12h/24h view for hour selection clock.\r\n   * @default false\r\n   */\n  ampm: PropTypes.bool,\n  /**\r\n   * Display ampm controls under the clock (instead of in the toolbar).\r\n   * @default false\r\n   */\n  ampmInClock: PropTypes.bool,\n  /**\r\n   * @ignore\r\n   */\n  autoFocus: PropTypes.bool,\n  /**\r\n   * @ignore\r\n   */\n  children: PropTypes.node,\n  /**\r\n   * className applied to the root component.\r\n   */\n  className: PropTypes.string,\n  /**\r\n   * The components used for each slot.\r\n   * Either a string to use a HTML element or a component.\r\n   * @default {}\r\n   */\n  components: PropTypes.shape({\n    LeftArrowButton: PropTypes.elementType,\n    LeftArrowIcon: PropTypes.elementType,\n    OpenPickerIcon: PropTypes.elementType,\n    RightArrowButton: PropTypes.elementType,\n    RightArrowIcon: PropTypes.elementType,\n    SwitchViewButton: PropTypes.elementType,\n    SwitchViewIcon: PropTypes.elementType\n  }),\n  /**\r\n   * The props used for each slot inside.\r\n   * @default {}\r\n   */\n  componentsProps: PropTypes.object,\n  /**\r\n   * Date tab icon.\r\n   */\n  dateRangeIcon: PropTypes.node,\n  /**\r\n   * Default calendar month displayed when `value={null}`.\r\n   */\n  defaultCalendarMonth: PropTypes.any,\n  /**\r\n   * If `true` the popup or dialog will immediately close after submitting full date.\r\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\r\n   */\n  disableCloseOnSelect: PropTypes.bool,\n  /**\r\n   * If `true`, the picker and text field are disabled.\r\n   */\n  disabled: PropTypes.bool,\n  /**\r\n   * @default false\r\n   */\n  disableFuture: PropTypes.bool,\n  /**\r\n   * If `true`, todays date is rendering without highlighting with circle.\r\n   * @default false\r\n   */\n  disableHighlightToday: PropTypes.bool,\n  /**\r\n   * Do not ignore date part when validating min/max time.\r\n   * @default false\r\n   */\n  disableIgnoringDatePartForTimeValidation: PropTypes.bool,\n  /**\r\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\r\n   * @default false\r\n   */\n  disableMaskedInput: PropTypes.bool,\n  /**\r\n   * Do not render open picker button (renders only text field with validation).\r\n   * @default false\r\n   */\n  disableOpenPicker: PropTypes.bool,\n  /**\r\n   * @default false\r\n   */\n  disablePast: PropTypes.bool,\n  /**\r\n   * Accessible text that helps user to understand which time and view is selected.\r\n   * @default <TDate extends any>(\r\n   *   view: ClockView,\r\n   *   time: TDate | null,\r\n   *   adapter: MuiPickersAdapter<TDate>,\r\n   * ) =>\r\n   *   `Select ${view}. ${\r\n   *     time === null ? 'No time selected' : `Selected time is ${adapter.format(time, 'fullTime')}`\r\n   *   }`\r\n   */\n  getClockLabelText: PropTypes.func,\n  /**\r\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\r\n   * @default (value, utils) => `Choose date, selected date is ${utils.format(utils.date(value), 'fullDate')}`\r\n   */\n  getOpenDialogAriaText: PropTypes.func,\n  /**\r\n   * Get aria-label text for switching between views button.\r\n   */\n  getViewSwitchingButtonText: PropTypes.func,\n  /**\r\n   * To show tabs.\r\n   */\n  hideTabs: PropTypes.bool,\n  /**\r\n   * @ignore\r\n   */\n  ignoreInvalidInputs: PropTypes.bool,\n  /**\r\n   * Props to pass to keyboard input adornment.\r\n   */\n  InputAdornmentProps: PropTypes.object,\n  /**\r\n   * Format string.\r\n   */\n  inputFormat: PropTypes.string,\n  /**\r\n   * @ignore\r\n   */\n  InputProps: PropTypes.object,\n  /**\r\n   * Pass a ref to the `input` element.\r\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n  /**\r\n   * @ignore\r\n   */\n  key: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\r\n   * @ignore\r\n   */\n  label: PropTypes.node,\n  /**\r\n   * Left arrow icon aria-label text.\r\n   */\n  leftArrowButtonText: PropTypes.string,\n  /**\r\n   * If `true` renders `LoadingComponent` in calendar instead of calendar view.\r\n   * Can be used to preload information and show it in calendar.\r\n   * @default false\r\n   */\n  loading: PropTypes.bool,\n  /**\r\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\r\n   */\n  mask: PropTypes.string,\n  /**\r\n   * @ignore\r\n   */\n  maxDate: PropTypes.oneOfType([PropTypes.any, PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string]),\n  /**\r\n   * Minimal selectable moment of time with binding to date, to set max time in each day use `maxTime`.\r\n   */\n  maxDateTime: PropTypes.oneOfType([PropTypes.any, PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string]),\n  /**\r\n   * @ignore\r\n   */\n  maxTime: PropTypes.oneOfType([PropTypes.any, PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string]),\n  /**\r\n   * @ignore\r\n   */\n  minDate: PropTypes.oneOfType([PropTypes.any, PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string]),\n  /**\r\n   * Minimal selectable moment of time with binding to date, to set min time in each day use `minTime`.\r\n   */\n  minDateTime: PropTypes.oneOfType([PropTypes.any, PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string]),\n  /**\r\n   * @ignore\r\n   */\n  minTime: PropTypes.oneOfType([PropTypes.any, PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string]),\n  /**\r\n   * Step over minutes.\r\n   * @default 1\r\n   */\n  minutesStep: PropTypes.number,\n  /**\r\n   * Callback fired when date is accepted @DateIOType.\r\n   */\n  onAccept: PropTypes.func,\n  /**\r\n   * Callback fired when the value (the selected date) changes @DateIOType.\r\n   */\n  onChange: PropTypes.func.isRequired,\n  /**\r\n   * Callback fired when the popup requests to be closed.\r\n   * Use in controlled mode (see open).\r\n   */\n  onClose: PropTypes.func,\n  /**\r\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\r\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\r\n   * This can be used to render appropriate form error.\r\n   *\r\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\r\n   * @DateIOType\r\n   */\n  onError: PropTypes.func,\n  /**\r\n   * Callback firing on month change. @DateIOType\r\n   */\n  onMonthChange: PropTypes.func,\n  /**\r\n   * Callback fired when the popup requests to be opened.\r\n   * Use in controlled mode (see open).\r\n   */\n  onOpen: PropTypes.func,\n  /**\r\n   * Callback fired on view change.\r\n   */\n  onViewChange: PropTypes.func,\n  /**\r\n   * Callback firing on year change @DateIOType.\r\n   */\n  onYearChange: PropTypes.func,\n  /**\r\n   * Control the popup or dialog open state.\r\n   */\n  open: PropTypes.bool,\n  /**\r\n   * Props to pass to keyboard adornment button.\r\n   */\n  OpenPickerButtonProps: PropTypes.object,\n  /**\r\n   * First view to show.\r\n   */\n  openTo: PropTypes.oneOf(['day', 'hours', 'minutes', 'month', 'year']),\n  /**\r\n   * Force rendering in particular orientation.\r\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n  /**\r\n   * Popper props passed down to [Popper](https://material-ui.com/api/popper/) component.\r\n   */\n  PopperProps: PropTypes.object,\n  /**\r\n   * Make picker read only.\r\n   */\n  readOnly: PropTypes.bool,\n  /**\r\n   * Disable heavy animations.\r\n   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)\r\n   */\n  reduceAnimations: PropTypes.bool,\n  /**\r\n   * Custom renderer for day. Check the [PickersDay](https://material-ui.com/api/pickers-day/) component.\r\n   */\n  renderDay: PropTypes.func,\n  /**\r\n   * The `renderInput` prop allows you to customize the rendered input.\r\n   * The `props` argument of this render prop contains props of [TextField](https://material-ui.com/api/text-field/#textfield-api) that you need to forward.\r\n   * Pay specific attention to the `ref` and `inputProps` keys.\r\n   * @example ```jsx\r\n   * renderInput={props => <TextField {...props} />}\r\n   * ````\r\n   */\n  renderInput: PropTypes.func.isRequired,\n  /**\r\n   * Component displaying when passed `loading` true.\r\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\r\n   */\n  renderLoading: PropTypes.func,\n  /**\r\n   * Custom formatter to be passed into Rifm component.\r\n   */\n  rifmFormatter: PropTypes.func,\n  /**\r\n   * Right arrow icon aria-label text.\r\n   */\n  rightArrowButtonText: PropTypes.string,\n  /**\r\n   * Disable specific date. @DateIOType\r\n   */\n  shouldDisableDate: PropTypes.func,\n  /**\r\n   * Dynamically check if time is disabled or not.\r\n   * If returns `false` appropriate time point will ot be acceptable.\r\n   */\n  shouldDisableTime: PropTypes.func,\n  /**\r\n   * Disable specific years dynamically.\r\n   * Works like `shouldDisableDate` but for year selection view @DateIOType.\r\n   */\n  shouldDisableYear: PropTypes.func,\n  /**\r\n   * If `true`, days that have `outsideCurrentMonth={true}` are displayed.\r\n   * @default false\r\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n  /**\r\n   * If `true`, show the toolbar even in desktop mode.\r\n   */\n  showToolbar: PropTypes.bool,\n  /**\r\n   * Time tab icon.\r\n   */\n  timeIcon: PropTypes.node,\n  /**\r\n   * Component that will replace default toolbar renderer.\r\n   * @default DateTimePickerToolbar\r\n   */\n  ToolbarComponent: PropTypes.elementType,\n  /**\r\n   * Date format, that is displaying in toolbar.\r\n   */\n  toolbarFormat: PropTypes.string,\n  /**\r\n   * Mobile picker date value placeholder, displaying if `value` === `null`.\r\n   * @default \"–\"\r\n   */\n  toolbarPlaceholder: PropTypes.node,\n  /**\r\n   * Mobile picker title, displaying in the toolbar.\r\n   * @default \"SELECT DATE\"\r\n   */\n  toolbarTitle: PropTypes.node,\n  /**\r\n   * Custom component for popper [Transition](https://material-ui.com/components/transitions/#transitioncomponent-prop).\r\n   */\n  TransitionComponent: PropTypes.elementType,\n  /**\r\n   * The value of the picker.\r\n   */\n  value: PropTypes.oneOfType([PropTypes.any, PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string]),\n  /**\r\n   * Array of views to show.\r\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['day', 'hours', 'minutes', 'month', 'year']).isRequired)\n} : void 0;\nexport default DesktopDateTimePicker;","map":null,"metadata":{},"sourceType":"module"}