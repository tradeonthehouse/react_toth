{"ast":null,"code":"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { ThemeProvider as MuiThemeProvider } from '@material-ui/private-theming';\nimport { exactProp } from '@material-ui/utils';\nimport { ThemeContext as StyledEngineThemeContext } from '@material-ui/styled-engine';\nimport useTheme from '../useTheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction InnerThemeProvider(props) {\n  const theme = useTheme();\n  return /*#__PURE__*/_jsx(StyledEngineThemeContext.Provider, {\n    value: typeof theme === 'object' ? theme : {},\n    children: props.children\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? InnerThemeProvider.propTypes = {\n  /**\r\n   * Your component tree.\r\n   */\n  children: PropTypes.node\n} : void 0;\n/**\r\n * This component makes the `theme` available down the React tree.\r\n * It should preferably be used at **the root of your component tree**.\r\n */\n\nfunction ThemeProvider(props) {\n  const {\n    children,\n    theme: localTheme\n  } = props;\n  return /*#__PURE__*/_jsx(MuiThemeProvider, {\n    theme: localTheme,\n    children: /*#__PURE__*/_jsx(InnerThemeProvider, {\n      children: children\n    })\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes = {\n  /**\r\n   * Your component tree.\r\n   */\n  children: PropTypes.node,\n  /**\r\n   * A theme object. You can provide a function to extend the outer theme.\r\n   */\n  theme: PropTypes.oneOfType([PropTypes.object, PropTypes.func]).isRequired\n} : void 0;\nif (process.env.NODE_ENV !== 'production') {\n  process.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes = exactProp(ThemeProvider.propTypes) : void 0;\n}\nexport default ThemeProvider;","map":null,"metadata":{},"sourceType":"module"}