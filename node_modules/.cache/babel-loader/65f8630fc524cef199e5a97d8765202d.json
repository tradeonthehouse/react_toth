{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"disabled\", \"disableFocusRipple\", \"fullWidth\", \"icon\", \"indicator\", \"label\", \"onChange\", \"onClick\", \"onFocus\", \"selected\", \"selectionFollowsFocus\", \"textColor\", \"value\", \"wrapped\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@material-ui/unstyled';\nimport ButtonBase from '../ButtonBase';\nimport capitalize from '../utils/capitalize';\nimport useThemeProps from '../styles/useThemeProps';\nimport styled from '../styles/styled';\nimport unsupportedProp from '../utils/unsupportedProp';\nimport tabClasses, { getTabUtilityClass } from './tabClasses';\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = styleProps => {\n  const {\n    classes,\n    textColor,\n    fullWidth,\n    wrapped,\n    icon,\n    label,\n    selected,\n    disabled\n  } = styleProps;\n  const slots = {\n    root: ['root', icon && label && 'labelIcon', `textColor${capitalize(textColor)}`, fullWidth && 'fullWidth', wrapped && 'wrapped', selected && 'selected', disabled && 'disabled']\n  };\n  return composeClasses(slots, getTabUtilityClass, classes);\n};\nconst TabRoot = styled(ButtonBase, {\n  name: 'MuiTab',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      styleProps\n    } = props;\n    return [styles.root, styleProps.label && styleProps.icon && styles.labelIcon, styles[`textColor${capitalize(styleProps.textColor)}`], styleProps.fullWidth && styles.fullWidth, styleProps.wrapped && styles.wrapped];\n  }\n})(_ref => {\n  let {\n    theme,\n    styleProps\n  } = _ref;\n  return _extends({}, theme.typography.button, {\n    maxWidth: 360,\n    minWidth: 90,\n    position: 'relative',\n    minHeight: 48,\n    flexShrink: 0,\n    padding: '12px 16px',\n    overflow: 'hidden',\n    whiteSpace: 'normal',\n    textAlign: 'center',\n    flexDirection: 'column',\n    lineHeight: 1.25\n  }, styleProps.icon && styleProps.label && {\n    minHeight: 72,\n    paddingTop: 9,\n    paddingBottom: 9,\n    [`& > *:first-child`]: {\n      marginBottom: 6\n    }\n  }, styleProps.textColor === 'inherit' && {\n    color: 'inherit',\n    opacity: 0.6,\n    // same opacity as theme.palette.text.secondary\n    [`&.${tabClasses.selected}`]: {\n      opacity: 1\n    },\n    [`&.${tabClasses.disabled}`]: {\n      opacity: theme.palette.action.disabledOpacity\n    }\n  }, styleProps.textColor === 'primary' && {\n    color: theme.palette.text.secondary,\n    [`&.${tabClasses.selected}`]: {\n      color: theme.palette.primary.main\n    },\n    [`&.${tabClasses.disabled}`]: {\n      color: theme.palette.text.disabled\n    }\n  }, styleProps.textColor === 'secondary' && {\n    color: theme.palette.text.secondary,\n    [`&.${tabClasses.selected}`]: {\n      color: theme.palette.secondary.main\n    },\n    [`&.${tabClasses.disabled}`]: {\n      color: theme.palette.text.disabled\n    }\n  }, styleProps.fullWidth && {\n    flexShrink: 1,\n    flexGrow: 1,\n    flexBasis: 0,\n    maxWidth: 'none'\n  }, styleProps.wrapped && {\n    fontSize: theme.typography.pxToRem(12)\n  });\n});\nconst Tab = /*#__PURE__*/React.forwardRef(function Tab(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiTab'\n  });\n  const {\n      className,\n      disabled = false,\n      disableFocusRipple = false,\n      // eslint-disable-next-line react/prop-types\n      fullWidth,\n      icon,\n      // eslint-disable-next-line react/prop-types\n      indicator,\n      label,\n      onChange,\n      onClick,\n      onFocus,\n      // eslint-disable-next-line react/prop-types\n      selected,\n      // eslint-disable-next-line react/prop-types\n      selectionFollowsFocus,\n      // eslint-disable-next-line react/prop-types\n      textColor = 'inherit',\n      value,\n      wrapped = false\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const styleProps = _extends({}, props, {\n    disabled,\n    disableFocusRipple,\n    selected,\n    icon: !!icon,\n    label: !!label,\n    fullWidth,\n    textColor,\n    wrapped\n  });\n  const classes = useUtilityClasses(styleProps);\n  const handleClick = event => {\n    if (!selected && onChange) {\n      onChange(event, value);\n    }\n    if (onClick) {\n      onClick(event);\n    }\n  };\n  const handleFocus = event => {\n    if (selectionFollowsFocus && !selected && onChange) {\n      onChange(event, value);\n    }\n    if (onFocus) {\n      onFocus(event);\n    }\n  };\n  return /*#__PURE__*/_jsxs(TabRoot, _extends({\n    focusRipple: !disableFocusRipple,\n    className: clsx(classes.root, className),\n    ref: ref,\n    role: \"tab\",\n    \"aria-selected\": selected,\n    disabled: disabled,\n    onClick: handleClick,\n    onFocus: handleFocus,\n    styleProps: styleProps,\n    tabIndex: selected ? 0 : -1\n  }, other, {\n    children: [icon, label, indicator]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Tab.propTypes\n/* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * This prop isn't supported.\n   * Use the `component` prop if you need to change the children structure.\n   */\n  children: unsupportedProp,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the  keyboard focus ripple is disabled.\n   * @default false\n   */\n  disableFocusRipple: PropTypes.bool,\n  /**\n   * If `true`, the ripple effect is disabled.\n   *\n   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\n   * to highlight the element by applying separate styles with the `.Mui-focusedVisible` class.\n   * @default false\n   */\n  disableRipple: PropTypes.bool,\n  /**\n   * The icon to display.\n   */\n  icon: PropTypes.oneOfType([PropTypes.element, PropTypes.string]),\n  /**\n   * The label element.\n   */\n  label: PropTypes.node,\n  /**\n   * @ignore\n   */\n  onChange: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.object,\n  /**\n   * You can provide your own value. Otherwise, we fallback to the child position index.\n   */\n  value: PropTypes.any,\n  /**\n   * Tab labels appear in a single row.\n   * They can use a second line if needed.\n   * @default false\n   */\n  wrapped: PropTypes.bool\n} : void 0;\nexport default Tab;","map":null,"metadata":{},"sourceType":"module"}