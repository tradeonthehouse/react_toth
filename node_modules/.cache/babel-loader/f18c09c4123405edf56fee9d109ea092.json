{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"icon\", \"label\", \"onChange\", \"onTouchStart\", \"onTouchEnd\", \"onClick\", \"selected\", \"showLabel\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@material-ui/unstyled';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport ButtonBase from '../ButtonBase';\nimport unsupportedProp from '../utils/unsupportedProp';\nimport bottomNavigationActionClasses, { getBottomNavigationActionUtilityClass } from './bottomNavigationActionClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = styleProps => {\n  const {\n    classes,\n    showLabel,\n    selected\n  } = styleProps;\n  const slots = {\n    root: ['root', !showLabel && !selected && 'iconOnly', selected && 'selected'],\n    label: ['label', !showLabel && !selected && 'iconOnly', selected && 'selected']\n  };\n  return composeClasses(slots, getBottomNavigationActionUtilityClass, classes);\n};\nconst BottomNavigationActionRoot = styled(ButtonBase, {\n  name: 'MuiBottomNavigationAction',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      styleProps\n    } = props;\n    return [styles.root, !styleProps.showLabel && !styleProps.selected && styles.iconOnly];\n  }\n})(_ref => {\n  let {\n    theme,\n    styleProps\n  } = _ref;\n  return _extends({\n    /* Styles applied to the root element. */\n    transition: theme.transitions.create(['color', 'padding-top'], {\n      duration: theme.transitions.duration.short\n    }),\n    padding: '6px 12px 8px',\n    minWidth: 80,\n    maxWidth: 168,\n    color: theme.palette.text.secondary,\n    flexDirection: 'column',\n    flex: '1'\n  }, !styleProps.showLabel && !styleProps.selected && {\n    paddingTop: 16\n  }, {\n    [`&.${bottomNavigationActionClasses.selected}`]: {\n      paddingTop: 6,\n      color: theme.palette.primary.main\n    }\n  });\n});\nconst BottomNavigationActionLabel = styled('span', {\n  name: 'MuiBottomNavigationAction',\n  slot: 'Label',\n  overridesResolver: (props, styles) => styles.label\n})(_ref2 => {\n  let {\n    theme,\n    styleProps\n  } = _ref2;\n  return _extends({\n    /* Styles applied to the label's span element. */\n    fontFamily: theme.typography.fontFamily,\n    fontSize: theme.typography.pxToRem(12),\n    opacity: 1,\n    transition: 'font-size 0.2s, opacity 0.2s',\n    transitionDelay: '0.1s'\n  }, !styleProps.showLabel && !styleProps.selected && {\n    opacity: 0,\n    transitionDelay: '0s'\n  }, {\n    [`&.${bottomNavigationActionClasses.selected}`]: {\n      fontSize: theme.typography.pxToRem(14)\n    }\n  });\n});\nconst BottomNavigationAction = /*#__PURE__*/React.forwardRef(function BottomNavigationAction(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiBottomNavigationAction'\n  });\n  const {\n      className,\n      icon,\n      label,\n      onChange,\n      onTouchStart,\n      onTouchEnd,\n      onClick,\n      value\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const styleProps = props;\n  const classes = useUtilityClasses(styleProps);\n  const touchStartPos = React.useRef();\n  const touchTimer = React.useRef();\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(touchTimer.current);\n    };\n  }, [touchTimer]);\n  const handleTouchStart = event => {\n    if (onTouchStart) {\n      onTouchStart(event);\n    }\n    const {\n      clientX,\n      clientY\n    } = event.touches[0];\n    touchStartPos.current = {\n      clientX,\n      clientY\n    };\n  };\n  const handleTouchEnd = event => {\n    if (onTouchEnd) onTouchEnd(event);\n    const target = event.target;\n    const {\n      clientX,\n      clientY\n    } = event.changedTouches[0];\n    if (Math.abs(clientX - touchStartPos.current.clientX) < 10 && Math.abs(clientY - touchStartPos.current.clientY) < 10) {\n      touchTimer.current = setTimeout(() => {\n        // Simulate the native tap behavior on mobile.\n        // On the web, a tap won't trigger a click if a container is scrolling.\n        //\n        // Note that the synthetic behavior won't trigger a native <a> nor\n        // it will trigger a click at all on iOS.\n        target.dispatchEvent(new Event('click', {\n          bubbles: true\n        }));\n      }, 10);\n    }\n  };\n  const handleChange = event => {\n    clearTimeout(touchTimer.current);\n    if (onChange) {\n      onChange(event, value);\n    }\n    if (onClick) {\n      onClick(event);\n    }\n  };\n  return /*#__PURE__*/_jsxs(BottomNavigationActionRoot, _extends({\n    ref: ref,\n    className: clsx(classes.root, className),\n    focusRipple: true,\n    onClick: handleChange,\n    onTouchStart: handleTouchStart,\n    onTouchEnd: handleTouchEnd,\n    styleProps: styleProps\n  }, other, {\n    children: [icon, /*#__PURE__*/_jsx(BottomNavigationActionLabel, {\n      className: classes.label,\n      styleProps: styleProps,\n      children: label\n    })]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? BottomNavigationAction.propTypes\n/* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * This prop isn't supported.\n   * Use the `component` prop if you need to change the children structure.\n   */\n  children: unsupportedProp,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The icon to display.\n   */\n  icon: PropTypes.node,\n  /**\n   * The label element.\n   */\n  label: PropTypes.node,\n  /**\n   * @ignore\n   */\n  onChange: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onTouchEnd: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onTouchStart: PropTypes.func,\n  /**\n   * If `true`, the `BottomNavigationAction` will show its label.\n   * By default, only the selected `BottomNavigationAction`\n   * inside `BottomNavigation` will show its label.\n   *\n   * The prop defaults to the value (`false`) inherited from the parent BottomNavigation component.\n   */\n  showLabel: PropTypes.bool,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.object,\n  /**\n   * You can provide your own value. Otherwise, we fallback to the child position index.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default BottomNavigationAction;","map":null,"metadata":{},"sourceType":"module"}