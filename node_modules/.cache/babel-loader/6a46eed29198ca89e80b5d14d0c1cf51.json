{"ast":null,"code":"import { resetBox, applyTreeDeltas } from '../../utils/geometry/delta-apply.js';\nimport { updateBoxDelta } from '../../utils/geometry/delta-calc.js';\nfunction updateLayoutDeltas(_a, _b, treePath, transformOrigin) {\n  var delta = _a.delta,\n    layout = _a.layout,\n    layoutCorrected = _a.layoutCorrected,\n    treeScale = _a.treeScale;\n  var target = _b.target;\n  /**\r\n   * Reset the corrected box with the latest values from box, as we're then going\r\n   * to perform mutative operations on it.\r\n   */\n  resetBox(layoutCorrected, layout);\n  /**\r\n   * Apply all the parent deltas to this box to produce the corrected box. This\r\n   * is the layout box, as it will appear on screen as a result of the transforms of its parents.\r\n   */\n  applyTreeDeltas(layoutCorrected, treeScale, treePath);\n  /**\r\n   * Update the delta between the corrected box and the target box before user-set transforms were applied.\r\n   * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\r\n   * for our layout reprojection, but still allow them to be scaled correctly by the user.\r\n   * It might be that to simplify this we may want to accept that user-set scale is also corrected\r\n   * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\r\n   * to allow people to choose whether these styles are corrected based on just the\r\n   * layout reprojection or the final bounding box.\r\n   */\n  updateBoxDelta(delta, layoutCorrected, target, transformOrigin);\n}\nexport { updateLayoutDeltas };","map":null,"metadata":{},"sourceType":"module"}