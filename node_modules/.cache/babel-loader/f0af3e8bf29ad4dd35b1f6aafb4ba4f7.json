{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"color\", \"value\", \"valueBuffer\", \"variant\"];\nlet _ = t => t,\n  _t,\n  _t2,\n  _t3,\n  _t4,\n  _t5,\n  _t6;\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@material-ui/unstyled';\nimport { keyframes, css, darken, lighten } from '@material-ui/system';\nimport capitalize from '../utils/capitalize';\nimport useTheme from '../styles/useTheme';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getLinearProgressUtilityClass } from './linearProgressClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst TRANSITION_DURATION = 4; // seconds\n\nconst indeterminate1Keyframe = keyframes(_t || (_t = _`\n  0% {\n    left: -35%;\n    right: 100%;\n  }\n\n  60% {\n    left: 100%;\n    right: -90%;\n  }\n\n  100% {\n    left: 100%;\n    right: -90%;\n  }\n`));\nconst indeterminate2Keyframe = keyframes(_t2 || (_t2 = _`\n  0% {\n    left: -200%;\n    right: 100%;\n  }\n\n  60% {\n    left: 107%;\n    right: -8%;\n  }\n\n  100% {\n    left: 107%;\n    right: -8%;\n  }\n`));\nconst bufferKeyframe = keyframes(_t3 || (_t3 = _`\n  0% {\n    opacity: 1;\n    background-position: 0 -23px;\n  }\n\n  60% {\n    opacity: 0;\n    background-position: 0 -23px;\n  }\n\n  100% {\n    opacity: 1;\n    background-position: -200px -23px;\n  }\n`));\nconst useUtilityClasses = styleProps => {\n  const {\n    classes,\n    variant,\n    color\n  } = styleProps;\n  const slots = {\n    root: ['root', `color${capitalize(color)}`, variant],\n    dashed: ['dashed', `dashedColor${capitalize(color)}`],\n    bar1: ['bar', `barColor${capitalize(color)}`, (variant === 'indeterminate' || variant === 'query') && 'bar1Indeterminate', variant === 'determinate' && 'bar1Determinate', variant === 'buffer' && 'bar1Buffer'],\n    bar2: ['bar', variant !== 'buffer' && `barColor${capitalize(color)}`, variant === 'buffer' && `color${capitalize(color)}`, (variant === 'indeterminate' || variant === 'query') && 'bar2Indeterminate', variant === 'buffer' && 'bar2Buffer']\n  };\n  return composeClasses(slots, getLinearProgressUtilityClass, classes);\n};\nconst getColorShade = (theme, color) => {\n  if (color === 'inherit') {\n    return 'currentColor';\n  }\n  return theme.palette.mode === 'light' ? lighten(theme.palette[color].main, 0.62) : darken(theme.palette[color].main, 0.5);\n};\nconst LinearProgressRoot = styled('span', {\n  name: 'MuiLinearProgress',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      styleProps\n    } = props;\n    return [styles.root, styles[`color${capitalize(styleProps.color)}`], styles[styleProps.variant]];\n  }\n})(_ref => {\n  let {\n    styleProps,\n    theme\n  } = _ref;\n  return _extends({\n    /* Styles applied to the root element. */\n    position: 'relative',\n    overflow: 'hidden',\n    display: 'block',\n    height: 4,\n    zIndex: 0,\n    // Fix Safari's bug during composition of different paint.\n    '@media print': {\n      colorAdjust: 'exact'\n    },\n    backgroundColor: getColorShade(theme, styleProps.color)\n  }, styleProps.color === 'inherit' && styleProps.variant !== 'buffer' && {\n    backgroundColor: 'none',\n    '&::before': {\n      content: '\"\"',\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      right: 0,\n      bottom: 0,\n      backgroundColor: 'currentColor',\n      opacity: 0.3\n    }\n  }, styleProps.variant === 'buffer' && {\n    backgroundColor: 'transparent'\n  }, styleProps.variant === 'query' && {\n    transform: 'rotate(180deg)'\n  });\n});\nconst LinearProgressDashed = styled('span', {\n  name: 'MuiLinearProgress',\n  slot: 'Dashed',\n  overridesResolver: (props, styles) => {\n    const {\n      styleProps\n    } = props;\n    return [styles.dashed, styles[`dashedColor${capitalize(styleProps.color)}`]];\n  }\n})(_ref2 => {\n  let {\n    styleProps,\n    theme\n  } = _ref2;\n  const backgroundColor = getColorShade(theme, styleProps.color);\n  return _extends({\n    /* Styles applied to the additional bar element if `variant=\"buffer\"`. */\n    position: 'absolute',\n    marginTop: 0,\n    height: '100%',\n    width: '100%'\n  }, styleProps.color === 'inherit' && {\n    opacity: 0.3\n  }, {\n    backgroundImage: `radial-gradient(${backgroundColor} 0%, ${backgroundColor} 16%, transparent 42%)`,\n    backgroundSize: '10px 10px',\n    backgroundPosition: '0 -23px'\n  });\n}, css(_t4 || (_t4 = _`\n    animation: ${0} 3s infinite linear;\n  `), bufferKeyframe));\nconst LinearProgressBar1 = styled('span', {\n  name: 'MuiLinearProgress',\n  slot: 'Bar1',\n  overridesResolver: (props, styles) => {\n    const {\n      styleProps\n    } = props;\n    return [styles.bar, styles[`barColor${capitalize(styleProps.color)}`], (styleProps.variant === 'indeterminate' || styleProps.variant === 'query') && styles.bar1Indeterminate, styleProps.variant === 'determinate' && styles.bar1Determinate, styleProps.variant === 'buffer' && styles.bar1Buffer];\n  }\n})(_ref3 => {\n  let {\n    styleProps,\n    theme\n  } = _ref3;\n  return _extends({\n    /* Styles applied to the additional bar element if `variant=\"buffer\"`. */\n    width: '100%',\n    position: 'absolute',\n    left: 0,\n    bottom: 0,\n    top: 0,\n    transition: 'transform 0.2s linear',\n    transformOrigin: 'left',\n    backgroundColor: styleProps.color === 'inherit' ? 'currentColor' : theme.palette[styleProps.color].main\n  }, styleProps.variant === 'determinate' && {\n    transition: `transform .${TRANSITION_DURATION}s linear`\n  }, styleProps.variant === 'buffer' && {\n    zIndex: 1,\n    transition: `transform .${TRANSITION_DURATION}s linear`\n  });\n}, /* Styles applied to the bar1 element if `variant=\"indeterminate or query\"`. */\n_ref4 => {\n  let {\n    styleProps\n  } = _ref4;\n  return (styleProps.variant === 'indeterminate' || styleProps.variant === 'query') && css(_t5 || (_t5 = _`\n      width: auto;\n      animation: ${0} 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite;\n    `), indeterminate1Keyframe);\n});\nconst LinearProgressBar2 = styled('span', {\n  name: 'MuiLinearProgress',\n  slot: 'Bar2',\n  overridesResolver: (props, styles) => {\n    const {\n      styleProps\n    } = props;\n    return [styles.bar, styles[`barColor${capitalize(styleProps.color)}`], (styleProps.variant === 'indeterminate' || styleProps.variant === 'query') && styles.bar2Indeterminate, styleProps.variant === 'buffer' && styles.bar2Buffer];\n  }\n})(_ref5 => {\n  let {\n    styleProps,\n    theme\n  } = _ref5;\n  return _extends({\n    /* Styles applied to the additional bar element if `variant=\"buffer\"`. */\n    width: '100%',\n    position: 'absolute',\n    left: 0,\n    bottom: 0,\n    top: 0,\n    transition: 'transform 0.2s linear',\n    transformOrigin: 'left'\n  }, styleProps.variant !== 'buffer' && {\n    backgroundColor: styleProps.color === 'inherit' ? 'currentColor' : theme.palette[styleProps.color].main\n  }, styleProps.color === 'inherit' && {\n    opacity: 0.3\n  }, styleProps.variant === 'buffer' && {\n    backgroundColor: getColorShade(theme, styleProps.color),\n    transition: `transform .${TRANSITION_DURATION}s linear`\n  });\n}, /* Styles applied to the bar1 element if `variant=\"indeterminate or query\"`. */\n_ref6 => {\n  let {\n    styleProps\n  } = _ref6;\n  return (styleProps.variant === 'indeterminate' || styleProps.variant === 'query') && css(_t6 || (_t6 = _`\n      width: auto;\n      animation: ${0} 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) 1.15s infinite;\n    `), indeterminate2Keyframe);\n});\n/**\r\n * ## ARIA\r\n *\r\n * If the progress bar is describing the loading progress of a particular region of a page,\r\n * you should use `aria-describedby` to point to the progress bar, and set the `aria-busy`\r\n * attribute to `true` on that region until it has finished loading.\r\n */\n\nconst LinearProgress = /*#__PURE__*/React.forwardRef(function LinearProgress(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiLinearProgress'\n  });\n  const {\n      className,\n      color = 'primary',\n      value,\n      valueBuffer,\n      variant = 'indeterminate'\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const styleProps = _extends({}, props, {\n    color,\n    variant\n  });\n  const classes = useUtilityClasses(styleProps);\n  const theme = useTheme();\n  const rootProps = {};\n  const inlineStyles = {\n    bar1: {},\n    bar2: {}\n  };\n  if (variant === 'determinate' || variant === 'buffer') {\n    if (value !== undefined) {\n      rootProps['aria-valuenow'] = Math.round(value);\n      rootProps['aria-valuemin'] = 0;\n      rootProps['aria-valuemax'] = 100;\n      let transform = value - 100;\n      if (theme.direction === 'rtl') {\n        transform = -transform;\n      }\n      inlineStyles.bar1.transform = `translateX(${transform}%)`;\n    } else if (process.env.NODE_ENV !== 'production') {\n      console.error('Material-UI: You need to provide a value prop ' + 'when using the determinate or buffer variant of LinearProgress .');\n    }\n  }\n  if (variant === 'buffer') {\n    if (valueBuffer !== undefined) {\n      let transform = (valueBuffer || 0) - 100;\n      if (theme.direction === 'rtl') {\n        transform = -transform;\n      }\n      inlineStyles.bar2.transform = `translateX(${transform}%)`;\n    } else if (process.env.NODE_ENV !== 'production') {\n      console.error('Material-UI: You need to provide a valueBuffer prop ' + 'when using the buffer variant of LinearProgress.');\n    }\n  }\n  return /*#__PURE__*/_jsxs(LinearProgressRoot, _extends({\n    className: clsx(classes.root, className),\n    styleProps: styleProps,\n    role: \"progressbar\"\n  }, rootProps, {\n    ref: ref\n  }, other, {\n    children: [variant === 'buffer' ? /*#__PURE__*/_jsx(LinearProgressDashed, {\n      className: classes.dashed,\n      styleProps: styleProps\n    }) : null, /*#__PURE__*/_jsx(LinearProgressBar1, {\n      className: classes.bar1,\n      styleProps: styleProps,\n      style: inlineStyles.bar1\n    }), variant === 'determinate' ? null : /*#__PURE__*/_jsx(LinearProgressBar2, {\n      className: classes.bar2,\n      styleProps: styleProps,\n      style: inlineStyles.bar2\n    })]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? LinearProgress.propTypes\n/* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   */\n  classes: PropTypes.object,\n  /**\r\n   * @ignore\r\n   */\n  className: PropTypes.string,\n  /**\r\n   * The color of the component. It supports those theme colors that make sense for this component.\r\n   * @default 'primary'\r\n   */\n  color: PropTypes\n  /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['inherit', 'primary', 'secondary']), PropTypes.string]),\n  /**\r\n   * The system prop that allows defining system overrides as well as additional CSS styles.\r\n   */\n  sx: PropTypes.object,\n  /**\r\n   * The value of the progress indicator for the determinate and buffer variants.\r\n   * Value between 0 and 100.\r\n   */\n  value: PropTypes.number,\n  /**\r\n   * The value for the buffer variant.\r\n   * Value between 0 and 100.\r\n   */\n  valueBuffer: PropTypes.number,\n  /**\r\n   * The variant to use.\r\n   * Use indeterminate or query when there is no progress value.\r\n   * @default 'indeterminate'\r\n   */\n  variant: PropTypes.oneOf(['buffer', 'determinate', 'indeterminate', 'query'])\n} : void 0;\nexport default LinearProgress;","map":null,"metadata":{},"sourceType":"module"}