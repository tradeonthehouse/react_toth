{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"day\", \"outsideCurrentMonth\", \"isEndOfHighlighting\", \"isEndOfPreviewing\", \"isHighlighting\", \"isPreviewing\", \"isStartOfHighlighting\", \"isStartOfPreviewing\", \"selected\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { alpha, styled } from '@material-ui/core/styles';\nimport { unstable_composeClasses as composeClasses, generateUtilityClass, generateUtilityClasses } from '@material-ui/unstyled';\nimport { DAY_MARGIN } from '../internal/pickers/constants/dimensions';\nimport { useUtils } from '../internal/pickers/hooks/useUtils';\nimport PickersDay, { areDayPropsEqual } from '../PickersDay/PickersDay';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function getDateRangePickerDayUtilityClass(slot) {\n  return generateUtilityClass('MuiDateRangePickerDay', slot);\n}\nexport const dateRangePickerDayClasses = generateUtilityClasses('MuiDateRangePickerDay', ['root', 'rangeIntervalDayHighlight', 'rangeIntervalDayHighlightStart', 'rangeIntervalDayHighlightEnd', 'rangeIntervalPreview', 'rangeIntervalDayPreview', 'rangeIntervalDayPreviewStart', 'rangeIntervalDayPreviewEnd', 'day', 'dayOutsideRangeInterval', 'dayInsideRangeInterval', 'notSelectedDate']);\nconst useUtilityClasses = styleProps => {\n  const {\n    isHighlighting,\n    outsideCurrentMonth,\n    isStartOfHighlighting,\n    isStartOfMonth,\n    isEndOfHighlighting,\n    isEndOfMonth,\n    isPreviewing,\n    isStartOfPreviewing,\n    isEndOfPreviewing,\n    selected,\n    classes\n  } = styleProps;\n  const slots = {\n    root: ['root', isHighlighting && !outsideCurrentMonth && 'rangeIntervalDayHighlight', (isStartOfHighlighting || isStartOfMonth) && 'rangeIntervalDayHighlightStart', (isEndOfHighlighting || isEndOfMonth) && 'rangeIntervalDayHighlightEnd'],\n    rangeIntervalPreview: ['rangeIntervalPreview', isPreviewing && !outsideCurrentMonth && 'rangeIntervalDayPreview', (isStartOfPreviewing || isStartOfMonth) && 'rangeIntervalDayPreviewStart', (isEndOfPreviewing || isEndOfMonth) && 'rangeIntervalDayPreviewEnd'],\n    day: ['day', !selected && 'notSelectedDate', !isHighlighting && 'dayOutsideRangeInterval', !selected && isHighlighting && 'dayInsideRangeInterval']\n  };\n  return composeClasses(slots, getDateRangePickerDayUtilityClass, classes);\n};\nconst endBorderStyle = {\n  borderTopRightRadius: '50%',\n  borderBottomRightRadius: '50%'\n};\nconst startBorderStyle = {\n  borderTopLeftRadius: '50%',\n  borderBottomLeftRadius: '50%'\n};\nconst DateRangePickerDayRoot = styled('div', {\n  name: 'MuiDateRangePickerDay',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(_ref => {\n  let {\n    theme,\n    styleProps\n  } = _ref;\n  return _extends({\n    [`&:first-of-type .${dateRangePickerDayClasses.rangeIntervalDayPreview}`]: _extends({}, startBorderStyle, {\n      borderLeftColor: theme.palette.divider\n    }),\n    [`&:last-of-type .${dateRangePickerDayClasses.rangeIntervalDayPreview}`]: _extends({}, endBorderStyle, {\n      borderRightColor: theme.palette.divider\n    })\n  }, styleProps.isHighlighting && !styleProps.outsideCurrentMonth && {\n    borderRadius: 0,\n    color: theme.palette.primary.contrastText,\n    backgroundColor: alpha(theme.palette.primary.light, 0.6),\n    '&:first-of-type': startBorderStyle,\n    '&:last-of-type': endBorderStyle\n  }, (styleProps.isStartOfHighlighting || styleProps.isStartOfMonth) && _extends({}, startBorderStyle, {\n    paddingLeft: 0,\n    marginLeft: DAY_MARGIN / 2\n  }), (styleProps.isEndOfHighlighting || styleProps.isEndOfMonth) && _extends({}, endBorderStyle, {\n    paddingRight: 0,\n    marginRight: DAY_MARGIN / 2\n  }));\n});\nconst DateRangePickerDayRangeIntervalPreview = styled('div', {\n  name: 'MuiDateRangePickerDay',\n  slot: 'RangeIntervalPreview'\n})(_ref2 => {\n  let {\n    theme,\n    styleProps\n  } = _ref2;\n  return _extends({\n    // replace default day component margin with transparent border to avoid jumping on preview\n    border: '2px solid transparent'\n  }, styleProps.isPreviewing && !styleProps.outsideCurrentMonth && _extends({\n    borderRadius: 0,\n    border: `2px dashed ${theme.palette.divider}`,\n    borderLeftColor: 'transparent',\n    borderRightColor: 'transparent'\n  }, (styleProps.isStartOfPreviewing || styleProps.isStartOfMonth) && _extends({\n    borderLeftColor: theme.palette.divider\n  }, startBorderStyle), (styleProps.isEndOfPreviewing || styleProps.isEndOfMonth) && _extends({\n    borderRightColor: theme.palette.divider\n  }, endBorderStyle)));\n});\nconst DateRangePickerDayDay = styled(PickersDay, {\n  name: 'MuiDateRangePickerDay',\n  slot: 'Day'\n})(_ref3 => {\n  let {\n    theme,\n    styleProps\n  } = _ref3;\n  return _extends({\n    // Required to overlap preview border\n    transform: 'scale(1.1)',\n    '& > *': {\n      transform: 'scale(0.9)'\n    }\n  }, !styleProps.selected && {\n    backgroundColor: 'transparent'\n  }, !styleProps.isHighlighting && {\n    '&:hover': {\n      border: `1px solid ${theme.palette.grey[500]}`\n    }\n  }, !styleProps.selected && styleProps.isHighlighting && {\n    color: theme.palette.getContrastText(alpha(theme.palette.primary.light, 0.6))\n  });\n});\nconst DateRangePickerDay = /*#__PURE__*/React.forwardRef(function DateRangePickerDay(props, ref) {\n  const {\n      className,\n      day,\n      outsideCurrentMonth,\n      isHighlighting,\n      isPreviewing,\n      selected = false\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const utils = useUtils();\n  const isEndOfMonth = utils.isSameDay(day, utils.endOfMonth(day));\n  const isStartOfMonth = utils.isSameDay(day, utils.startOfMonth(day));\n  const shouldRenderHighlight = isHighlighting && !outsideCurrentMonth;\n  const shouldRenderPreview = isPreviewing && !outsideCurrentMonth;\n  const styleProps = _extends({}, props, {\n    selected,\n    isStartOfMonth,\n    isEndOfMonth\n  });\n  const classes = useUtilityClasses(styleProps);\n  return /*#__PURE__*/_jsx(DateRangePickerDayRoot, {\n    className: clsx(classes.root, className),\n    styleProps: styleProps,\n    children: /*#__PURE__*/_jsx(DateRangePickerDayRangeIntervalPreview, {\n      role: \"cell\",\n      className: classes.rangeIntervalPreview,\n      styleProps: styleProps,\n      children: /*#__PURE__*/_jsx(DateRangePickerDayDay, _extends({}, other, {\n        ref: ref,\n        disableMargin: true,\n        allowSameDateSelection: true,\n        day: day,\n        selected: selected,\n        outsideCurrentMonth: outsideCurrentMonth,\n        className: classes.day,\n        styleProps: styleProps\n      }))\n    })\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? DateRangePickerDay.propTypes\n/* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\r\n   * The content of the component.\r\n   */\n  children: PropTypes.node,\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   */\n  classes: PropTypes.object,\n  /**\r\n   * @ignore\r\n   */\n  className: PropTypes.string,\n  /**\r\n   * The date to show.\r\n   */\n  day: PropTypes.any.isRequired,\n  /**\r\n   * Set to `true` if the `day` is the end of a highlighted date range.\r\n   */\n  isEndOfHighlighting: PropTypes.bool.isRequired,\n  /**\r\n   * Set to `true` if the `day` is the start of a highlighted date range.\r\n   */\n  isEndOfPreviewing: PropTypes.bool.isRequired,\n  /**\r\n   * Set to `true` if the `day` is in a highlighted date range.\r\n   */\n  isHighlighting: PropTypes.bool.isRequired,\n  /**\r\n   * Set to `true` if the `day` is in a preview date range.\r\n   */\n  isPreviewing: PropTypes.bool.isRequired,\n  /**\r\n   * Set to `true` if the `day` is the start of a highlighted date range.\r\n   */\n  isStartOfHighlighting: PropTypes.bool.isRequired,\n  /**\r\n   * Set to `true` if the `day` is the end of a highlighted date range.\r\n   */\n  isStartOfPreviewing: PropTypes.bool.isRequired,\n  /**\r\n   * If `true`, day is outside of month and will be hidden.\r\n   */\n  outsideCurrentMonth: PropTypes.bool.isRequired,\n  /**\r\n   * If `true`, renders as selected.\r\n   * @default false\r\n   */\n  selected: PropTypes.bool,\n  /**\r\n   * The system prop that allows defining system overrides as well as additional CSS styles.\r\n   */\n  sx: PropTypes.object\n} : void 0;\n/**\r\n *\r\n * Demos:\r\n *\r\n * - [Date Range Picker](https://material-ui.com/components/date-range-picker/)\r\n *\r\n * API:\r\n *\r\n * - [DateRangePickerDay API](https://material-ui.com/api/date-range-picker-day/)\r\n */\n\nexport default /*#__PURE__*/React.memo(DateRangePickerDay, (prevProps, nextProps) => {\n  return prevProps.isHighlighting === nextProps.isHighlighting && prevProps.isEndOfHighlighting === nextProps.isEndOfHighlighting && prevProps.isStartOfHighlighting === nextProps.isStartOfHighlighting && prevProps.isPreviewing === nextProps.isPreviewing && prevProps.isEndOfPreviewing === nextProps.isEndOfPreviewing && prevProps.isStartOfPreviewing === nextProps.isStartOfPreviewing && areDayPropsEqual(prevProps, nextProps);\n});","map":null,"metadata":{},"sourceType":"module"}