{"ast":null,"code":"import { transformAxes } from '../../../render/html/utils/transform.js';\nfunction resetRotate(child) {\n  // If there's no detected rotation values, we can early return without a forced render.\n  var hasRotate = false;\n  // Keep a record of all the values we've reset\n  var resetValues = {};\n  // Check the rotate value of all axes and reset to 0\n  for (var i = 0; i < transformAxes.length; i++) {\n    var axis = transformAxes[i];\n    var key = \"rotate\" + axis;\n    // If this rotation doesn't exist as a motion value, then we don't\n    // need to reset it\n    if (!child.hasValue(key) || child.getStaticValue(key) === 0) continue;\n    hasRotate = true;\n    // Record the rotation and then temporarily set it to 0\n    resetValues[key] = child.getStaticValue(key);\n    child.setStaticValue(key, 0);\n  }\n  // If there's no rotation values, we don't need to do any more.\n  if (!hasRotate) return;\n  // Force a render of this element to apply the transform with all rotations\n  // set to 0.\n  child.syncRender();\n  // Put back all the values we reset\n  for (var key in resetValues) {\n    child.setStaticValue(key, resetValues[key]);\n  }\n  // Schedule a render for the next frame. This ensures we won't visually\n  // see the element with the reset rotate value applied.\n  child.scheduleRender();\n}\nexport { resetRotate };","map":null,"metadata":{},"sourceType":"module"}