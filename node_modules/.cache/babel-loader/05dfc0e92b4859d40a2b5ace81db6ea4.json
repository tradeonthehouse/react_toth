{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"active\", \"children\", \"className\", \"completed\", \"disabled\", \"expanded\", \"index\", \"last\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { integerPropType } from '@material-ui/utils';\nimport { unstable_composeClasses as composeClasses } from '@material-ui/unstyled';\nimport StepperContext from '../Stepper/StepperContext';\nimport StepContext from './StepContext';\nimport useThemeProps from '../styles/useThemeProps';\nimport styled from '../styles/styled';\nimport { getStepUtilityClass } from './stepClasses';\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = styleProps => {\n  const {\n    classes,\n    orientation,\n    alternativeLabel,\n    completed\n  } = styleProps;\n  const slots = {\n    root: ['root', orientation, alternativeLabel && 'alternativeLabel', completed && 'completed']\n  };\n  return composeClasses(slots, getStepUtilityClass, classes);\n};\nconst StepRoot = styled('div', {\n  name: 'MuiStep',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      styleProps\n    } = props;\n    return [styles.root, styles[styleProps.orientation], styleProps.alternativeLabel && styles.alternativeLabel, styleProps.completed && styles.completed];\n  }\n})(_ref => {\n  let {\n    styleProps\n  } = _ref;\n  return _extends({}, styleProps.orientation === 'horizontal' && {\n    paddingLeft: 8,\n    paddingRight: 8\n  }, styleProps.alternativeLabel && {\n    flex: 1,\n    position: 'relative'\n  });\n});\nconst Step = /*#__PURE__*/React.forwardRef(function Step(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiStep'\n  });\n  const {\n      active: activeProp,\n      children,\n      className,\n      completed: completedProp,\n      disabled: disabledProp,\n      expanded = false,\n      index,\n      last\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const {\n    activeStep,\n    connector,\n    alternativeLabel,\n    orientation,\n    nonLinear\n  } = React.useContext(StepperContext);\n  let [active = false, completed = false, disabled = false] = [activeProp, completedProp, disabledProp];\n  if (activeStep === index) {\n    active = activeProp !== undefined ? activeProp : true;\n  } else if (!nonLinear && activeStep > index) {\n    completed = completedProp !== undefined ? completedProp : true;\n  } else if (!nonLinear && activeStep < index) {\n    disabled = disabledProp !== undefined ? disabledProp : true;\n  }\n  const contextValue = React.useMemo(() => ({\n    index,\n    last,\n    expanded,\n    icon: index + 1,\n    active,\n    completed,\n    disabled\n  }), [index, last, expanded, active, completed, disabled]);\n  const styleProps = _extends({}, props, {\n    active,\n    orientation,\n    alternativeLabel,\n    completed,\n    disabled,\n    expanded\n  });\n  const classes = useUtilityClasses(styleProps);\n  const newChildren = /*#__PURE__*/_jsxs(StepRoot, _extends({\n    className: clsx(classes.root, className),\n    ref: ref,\n    styleProps: styleProps\n  }, other, {\n    children: [connector && alternativeLabel && index !== 0 ? connector : null, children]\n  }));\n  return /*#__PURE__*/_jsx(StepContext.Provider, {\n    value: contextValue,\n    children: connector && !alternativeLabel && index !== 0 ? /*#__PURE__*/_jsxs(React.Fragment, {\n      children: [connector, newChildren]\n    }) : newChildren\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Step.propTypes\n/* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\r\n   * Sets the step as active. Is passed to child components.\r\n   */\n  active: PropTypes.bool,\n  /**\r\n   * Should be `Step` sub-components such as `StepLabel`, `StepContent`.\r\n   */\n  children: PropTypes.node,\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   */\n  classes: PropTypes.object,\n  /**\r\n   * @ignore\r\n   */\n  className: PropTypes.string,\n  /**\r\n   * Mark the step as completed. Is passed to child components.\r\n   */\n  completed: PropTypes.bool,\n  /**\r\n   * If `true`, the step is disabled, will also disable the button if\r\n   * `StepButton` is a child of `Step`. Is passed to child components.\r\n   */\n  disabled: PropTypes.bool,\n  /**\r\n   * Expand the step.\r\n   * @default false\r\n   */\n  expanded: PropTypes.bool,\n  /**\r\n   * The position of the step.\r\n   * The prop defaults to the value inherited from the parent Stepper component.\r\n   */\n  index: integerPropType,\n  /**\r\n   * If `true`, the Step is displayed as rendered last.\r\n   * The prop defaults to the value inherited from the parent Stepper component.\r\n   */\n  last: PropTypes.bool,\n  /**\r\n   * The system prop that allows defining system overrides as well as additional CSS styles.\r\n   */\n  sx: PropTypes.object\n} : void 0;\nexport default Step;","map":null,"metadata":{},"sourceType":"module"}