{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"hasSelected\", \"isInner\", \"type\", \"value\"];\nimport * as React from 'react';\nimport { styled } from '@material-ui/core/styles';\nimport { CLOCK_WIDTH, CLOCK_HOUR_WIDTH } from './shared';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst ClockPointerRoot = styled('div', {\n  skipSx: true\n})(_ref => {\n  let {\n    theme,\n    styleProps\n  } = _ref;\n  return _extends({\n    width: 2,\n    backgroundColor: theme.palette.primary.main,\n    position: 'absolute',\n    left: 'calc(50% - 1px)',\n    bottom: '50%',\n    transformOrigin: 'center bottom 0px'\n  }, styleProps.toAnimateTransform && {\n    transition: theme.transitions.create(['transform', 'height'])\n  });\n});\nconst ClockPointerThumb = styled('div', {\n  skipSx: true\n})(_ref2 => {\n  let {\n    theme,\n    styleProps\n  } = _ref2;\n  return _extends({\n    width: 4,\n    height: 4,\n    backgroundColor: theme.palette.primary.contrastText,\n    borderRadius: '50%',\n    position: 'absolute',\n    top: -21,\n    left: `calc(50% - ${CLOCK_HOUR_WIDTH / 2}px)`,\n    border: `${(CLOCK_HOUR_WIDTH - 4) / 2}px solid ${theme.palette.primary.main}`,\n    boxSizing: 'content-box'\n  }, styleProps.hasSelected && {\n    backgroundColor: theme.palette.primary.main\n  });\n});\n/**\r\n * @ignore - internal component.\r\n */\n\nclass ClockPointer extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      toAnimateTransform: false,\n      previousType: undefined\n    };\n  }\n  render() {\n    const _this$props = this.props,\n      {\n        className,\n        isInner,\n        type,\n        value\n      } = _this$props,\n      other = _objectWithoutPropertiesLoose(_this$props, _excluded);\n    const styleProps = _extends({}, this.props, this.state);\n    const getAngleStyle = () => {\n      const max = type === 'hours' ? 12 : 60;\n      let angle = 360 / max * value;\n      if (type === 'hours' && value > 12) {\n        angle -= 360; // round up angle to max 360 degrees\n      }\n\n      return {\n        height: Math.round((isInner ? 0.26 : 0.4) * CLOCK_WIDTH),\n        transform: `rotateZ(${angle}deg)`\n      };\n    };\n    return /*#__PURE__*/_jsx(ClockPointerRoot, _extends({\n      style: getAngleStyle(),\n      className: className,\n      styleProps: styleProps\n    }, other, {\n      children: /*#__PURE__*/_jsx(ClockPointerThumb, {\n        styleProps: styleProps\n      })\n    }));\n  }\n}\nClockPointer.getDerivedStateFromProps = (nextProps, state) => {\n  if (nextProps.type !== state.previousType) {\n    return {\n      toAnimateTransform: true,\n      previousType: nextProps.type\n    };\n  }\n  return {\n    toAnimateTransform: false,\n    previousType: nextProps.type\n  };\n};\nexport default ClockPointer;","map":null,"metadata":{},"sourceType":"module"}