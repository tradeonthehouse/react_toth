{"ast":null,"code":"import { createMotionComponent } from '../../motion/index.js';\n\n/**\r\n * Convert any React component into a `motion` component. The provided component\r\n * **must** use `React.forwardRef` to the underlying DOM component you want to animate.\r\n *\r\n * ```jsx\r\n * const Component = React.forwardRef((props, ref) => {\r\n *   return <div ref={ref} />\r\n * })\r\n *\r\n * const MotionComponent = motion(Component)\r\n * ```\r\n *\r\n * @public\r\n */\nfunction createMotionProxy(createConfig) {\n  function custom(Component, customMotionComponentConfig) {\n    if (customMotionComponentConfig === void 0) {\n      customMotionComponentConfig = {};\n    }\n    return createMotionComponent(createConfig(Component, customMotionComponentConfig));\n  }\n  /**\r\n   * A cache of generated `motion` components, e.g `motion.div`, `motion.input` etc.\r\n   * Rather than generating them anew every render.\r\n   */\n  var componentCache = new Map();\n  return new Proxy(custom, {\n    /**\r\n     * Called when `motion` is referenced with a prop: `motion.div`, `motion.input` etc.\r\n     * The prop name is passed through as `key` and we can use that to generate a `motion`\r\n     * DOM component with that name.\r\n     */\n    get: function (_target, key) {\n      /**\r\n       * If this element doesn't exist in the component cache, create it and cache.\r\n       */\n      if (!componentCache.has(key)) {\n        componentCache.set(key, custom(key));\n      }\n      return componentCache.get(key);\n    }\n  });\n}\nexport { createMotionProxy };","map":null,"metadata":{},"sourceType":"module"}