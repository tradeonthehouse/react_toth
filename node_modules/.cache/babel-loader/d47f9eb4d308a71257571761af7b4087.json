{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"children\", \"injectFirst\", \"disableGeneration\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { exactProp } from '@material-ui/utils';\nimport { create } from 'jss';\nimport createGenerateClassName from '../createGenerateClassName';\nimport jssPreset from '../jssPreset'; // Default JSS instance.\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst jss = create(jssPreset()); // Use a singleton or the provided one by the context.\n//\n// The counter-based approach doesn't tolerate any mistake.\n// It's much safer to use the same counter everywhere.\n\nconst generateClassName = createGenerateClassName(); // Exported for test purposes\n\nexport const sheetsManager = new Map();\nconst defaultOptions = {\n  disableGeneration: false,\n  generateClassName,\n  jss,\n  sheetsCache: null,\n  sheetsManager,\n  sheetsRegistry: null\n};\nexport const StylesContext = /*#__PURE__*/React.createContext(defaultOptions);\nif (process.env.NODE_ENV !== 'production') {\n  StylesContext.displayName = 'StylesContext';\n}\nlet injectFirstNode;\nexport default function StylesProvider(props) {\n  const {\n      children,\n      injectFirst = false,\n      disableGeneration = false\n    } = props,\n    localOptions = _objectWithoutPropertiesLoose(props, _excluded);\n  const outerOptions = React.useContext(StylesContext);\n  const context = _extends({}, outerOptions, {\n    disableGeneration\n  }, localOptions);\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof window === 'undefined' && !context.sheetsManager) {\n      console.error('Material-UI: You need to use the ServerStyleSheets API when rendering on the server.');\n    }\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    if (context.jss.options.insertionPoint && injectFirst) {\n      console.error('Material-UI: You cannot use a custom insertionPoint and <StylesContext injectFirst> at the same time.');\n    }\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    if (injectFirst && localOptions.jss) {\n      console.error('Material-UI: You cannot use the jss and injectFirst props at the same time.');\n    }\n  }\n  if (!context.jss.options.insertionPoint && injectFirst && typeof window !== 'undefined') {\n    if (!injectFirstNode) {\n      const head = document.head;\n      injectFirstNode = document.createComment('mui-inject-first');\n      head.insertBefore(injectFirstNode, head.firstChild);\n    }\n    context.jss = create({\n      plugins: jssPreset().plugins,\n      insertionPoint: injectFirstNode\n    });\n  }\n  return /*#__PURE__*/_jsx(StylesContext.Provider, {\n    value: context,\n    children: children\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? StylesProvider.propTypes = {\n  /**\r\n   * Your component tree.\r\n   */\n  children: PropTypes.node,\n  /**\r\n   * You can disable the generation of the styles with this option.\r\n   * It can be useful when traversing the React tree outside of the HTML\r\n   * rendering step on the server.\r\n   * Let's say you are using react-apollo to extract all\r\n   * the queries made by the interface server-side - you can significantly speed up the traversal with this prop.\r\n   */\n  disableGeneration: PropTypes.bool,\n  /**\r\n   * JSS's class name generator.\r\n   */\n  generateClassName: PropTypes.func,\n  /**\r\n   * By default, the styles are injected last in the <head> element of the page.\r\n   * As a result, they gain more specificity than any other style sheet.\r\n   * If you want to override Material-UI's styles, set this prop.\r\n   */\n  injectFirst: PropTypes.bool,\n  /**\r\n   * JSS's instance.\r\n   */\n  jss: PropTypes.object,\n  /**\r\n   * @ignore\r\n   */\n  serverGenerateClassName: PropTypes.func,\n  /**\r\n   * @ignore\r\n   *\r\n   * Beta feature.\r\n   *\r\n   * Cache for the sheets.\r\n   */\n  sheetsCache: PropTypes.object,\n  /**\r\n   * @ignore\r\n   *\r\n   * The sheetsManager is used to deduplicate style sheet injection in the page.\r\n   * It's deduplicating using the (theme, styles) couple.\r\n   * On the server, you should provide a new instance for each request.\r\n   */\n  sheetsManager: PropTypes.object,\n  /**\r\n   * @ignore\r\n   *\r\n   * Collect the sheets.\r\n   */\n  sheetsRegistry: PropTypes.object\n} : void 0;\nif (process.env.NODE_ENV !== 'production') {\n  process.env.NODE_ENV !== \"production\" ? StylesProvider.propTypes = exactProp(StylesProvider.propTypes) : void 0;\n}","map":null,"metadata":{},"sourceType":"module"}