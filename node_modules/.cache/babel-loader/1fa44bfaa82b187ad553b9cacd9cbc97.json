{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"columns\", \"columnSpacing\", \"component\", \"container\", \"direction\", \"item\", \"lg\", \"md\", \"rowSpacing\", \"sm\", \"spacing\", \"wrap\", \"xl\", \"xs\", \"zeroMinWidth\"];\n// A grid component using the following libs as inspiration.\n//\n// For the implementation:\n// - https://getbootstrap.com/docs/4.3/layout/grid/\n// - https://github.com/kristoferjoseph/flexboxgrid/blob/master/src/css/flexboxgrid.css\n// - https://github.com/roylee0704/react-flexbox-grid\n// - https://material.angularjs.org/latest/layout/introduction\n//\n// Follow this flexbox Guide to better understand the underlying model:\n// - https://css-tricks.com/snippets/css/a-guide-to-flexbox/\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_extendSxProp as extendSxProp, handleBreakpoints } from '@material-ui/system';\nimport { unstable_composeClasses as composeClasses } from '@material-ui/unstyled';\nimport requirePropFactory from '../utils/requirePropFactory';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport GridContext from './GridContext';\nimport gridClasses, { getGridUtilityClass } from './gridClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction getOffset(val) {\n  const parse = parseFloat(val);\n  return `${parse}${String(val).replace(String(parse), '') || 'px'}`;\n} // Duplicated with Stack.js\n\nfunction resolveBreakpointValues(_ref) {\n  let {\n    values,\n    base\n  } = _ref;\n  const keys = Object.keys(base);\n  if (keys.length === 0) {\n    return values;\n  }\n  let previous;\n  return keys.reduce((acc, breakpoint) => {\n    if (typeof values === 'object') {\n      acc[breakpoint] = values[breakpoint] != null ? values[breakpoint] : values[previous];\n    } else {\n      acc[breakpoint] = values;\n    }\n    previous = breakpoint;\n    return acc;\n  }, {});\n}\nfunction generateGrid(globalStyles, theme, breakpoint, styleProps) {\n  const size = styleProps[breakpoint];\n  if (!size) return;\n  let styles = {};\n  if (size === true) {\n    // For the auto layouting\n    styles = {\n      flexBasis: 0,\n      flexGrow: 1,\n      maxWidth: '100%'\n    };\n  } else if (size === 'auto') {\n    styles = {\n      flexBasis: 'auto',\n      flexGrow: 0,\n      maxWidth: 'none'\n    };\n  } else {\n    const columnsBreakpointValues = resolveBreakpointValues({\n      values: styleProps.columns,\n      base: theme.breakpoints.values\n    }); // Keep 7 significant numbers.\n\n    const width = `${Math.round(size / columnsBreakpointValues[breakpoint] * 10e7) / 10e5}%`;\n    let more = {};\n    if (styleProps.container && styleProps.item && styleProps.columnSpacing !== 0) {\n      const themeSpacing = theme.spacing(styleProps.columnSpacing);\n      if (themeSpacing !== '0px') {\n        const fullWidth = `calc(${width} + ${getOffset(themeSpacing)})`;\n        more = {\n          flexBasis: fullWidth,\n          maxWidth: fullWidth\n        };\n      }\n    } // Close to the bootstrap implementation:\n    // https://github.com/twbs/bootstrap/blob/8fccaa2439e97ec72a4b7dc42ccc1f649790adb0/scss/mixins/_grid.scss#L41\n\n    styles = _extends({\n      flexBasis: width,\n      flexGrow: 0,\n      maxWidth: width\n    }, more);\n  } // No need for a media query for the first size.\n\n  if (theme.breakpoints.values[breakpoint] === 0) {\n    Object.assign(globalStyles, styles);\n  } else {\n    globalStyles[theme.breakpoints.up(breakpoint)] = styles;\n  }\n}\nfunction generateDirection(_ref2) {\n  let {\n    theme,\n    styleProps\n  } = _ref2;\n  return handleBreakpoints({\n    theme\n  }, styleProps.direction, propValue => {\n    const output = {\n      flexDirection: propValue\n    };\n    if (propValue.indexOf('column') === 0) {\n      output[`& > .${gridClasses.item}`] = {\n        maxWidth: 'none'\n      };\n    }\n    return output;\n  });\n}\nexport function generateRowGap(_ref3) {\n  let {\n    theme,\n    styleProps\n  } = _ref3;\n  const {\n    container,\n    rowSpacing\n  } = styleProps;\n  let styles = {};\n  if (container && rowSpacing !== 0) {\n    styles = handleBreakpoints({\n      theme\n    }, rowSpacing, propValue => {\n      const themeSpacing = theme.spacing(propValue);\n      if (themeSpacing !== '0px') {\n        return {\n          width: `calc(100% + ${getOffset(themeSpacing)})`,\n          marginTop: `-${getOffset(themeSpacing)}`,\n          [`& > .${gridClasses.item}`]: {\n            paddingTop: getOffset(themeSpacing)\n          }\n        };\n      }\n      return {};\n    });\n  }\n  return styles;\n}\nexport function generateColumnGap(_ref4) {\n  let {\n    theme,\n    styleProps\n  } = _ref4;\n  const {\n    container,\n    columnSpacing\n  } = styleProps;\n  let styles = {};\n  if (container && columnSpacing !== 0) {\n    styles = handleBreakpoints({\n      theme\n    }, columnSpacing, propValue => {\n      const themeSpacing = theme.spacing(propValue);\n      if (themeSpacing !== '0px') {\n        return {\n          width: `calc(100% + ${getOffset(themeSpacing)})`,\n          marginLeft: `-${getOffset(themeSpacing)}`,\n          [`& > .${gridClasses.item}`]: {\n            paddingLeft: getOffset(themeSpacing)\n          }\n        };\n      }\n      return {};\n    });\n  }\n  return styles;\n} // Default CSS values\n// flex: '0 1 auto',\n// flexDirection: 'row',\n// alignItems: 'flex-start',\n// flexWrap: 'nowrap',\n// justifyContent: 'flex-start',\n\nconst GridRoot = styled('div', {\n  name: 'MuiGrid',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      container,\n      direction,\n      item,\n      lg,\n      md,\n      sm,\n      spacing,\n      wrap,\n      xl,\n      xs,\n      zeroMinWidth\n    } = props.styleProps;\n    return [styles.root, container && styles.container, item && styles.item, zeroMinWidth && styles.zeroMinWidth, container && spacing !== 0 && styles[`spacing-xs-${String(spacing)}`], direction !== 'row' && styles[`direction-xs-${String(direction)}`], wrap !== 'wrap' && styles[`wrap-xs-${String(wrap)}`], xs !== false && styles[`grid-xs-${String(xs)}`], sm !== false && styles[`grid-sm-${String(sm)}`], md !== false && styles[`grid-md-${String(md)}`], lg !== false && styles[`grid-lg-${String(lg)}`], xl !== false && styles[`grid-xl-${String(xl)}`]];\n  }\n})(_ref5 => {\n  let {\n    styleProps\n  } = _ref5;\n  return _extends({\n    boxSizing: 'border-box'\n  }, styleProps.container && {\n    display: 'flex',\n    flexWrap: 'wrap',\n    width: '100%'\n  }, styleProps.item && {\n    margin: 0 // For instance, it's useful when used with a `figure` element.\n  }, styleProps.zeroMinWidth && {\n    minWidth: 0\n  }, styleProps.wrap === 'nowrap' && {\n    flexWrap: 'nowrap'\n  }, styleProps.wrap === 'reverse' && {\n    flexWrap: 'wrap-reverse'\n  });\n}, generateDirection, generateRowGap, generateColumnGap, _ref6 => {\n  let {\n    theme,\n    styleProps\n  } = _ref6;\n  return theme.breakpoints.keys.reduce((globalStyles, breakpoint) => {\n    // Use side effect over immutability for better performance.\n    generateGrid(globalStyles, theme, breakpoint, styleProps);\n    return globalStyles;\n  }, {});\n});\nconst useUtilityClasses = styleProps => {\n  const {\n    classes,\n    container,\n    direction,\n    item,\n    lg,\n    md,\n    sm,\n    spacing,\n    wrap,\n    xl,\n    xs,\n    zeroMinWidth\n  } = styleProps;\n  const slots = {\n    root: ['root', container && 'container', item && 'item', zeroMinWidth && 'zeroMinWidth', container && spacing !== 0 && `spacing-xs-${String(spacing)}`, direction !== 'row' && `direction-xs-${String(direction)}`, wrap !== 'wrap' && `wrap-xs-${String(wrap)}`, xs !== false && `grid-xs-${String(xs)}`, sm !== false && `grid-sm-${String(sm)}`, md !== false && `grid-md-${String(md)}`, lg !== false && `grid-lg-${String(lg)}`, xl !== false && `grid-xl-${String(xl)}`]\n  };\n  return composeClasses(slots, getGridUtilityClass, classes);\n};\nconst Grid = /*#__PURE__*/React.forwardRef(function Grid(inProps, ref) {\n  const themeProps = useThemeProps({\n    props: inProps,\n    name: 'MuiGrid'\n  });\n  const props = extendSxProp(themeProps);\n  const {\n      className,\n      columns: columnsProp = 12,\n      columnSpacing: columnSpacingProp,\n      component = 'div',\n      container = false,\n      direction = 'row',\n      item = false,\n      lg = false,\n      md = false,\n      rowSpacing: rowSpacingProp,\n      sm = false,\n      spacing = 0,\n      wrap = 'wrap',\n      xl = false,\n      xs = false,\n      zeroMinWidth = false\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const rowSpacing = rowSpacingProp || spacing;\n  const columnSpacing = columnSpacingProp || spacing;\n  const columns = React.useContext(GridContext) || columnsProp;\n  const styleProps = _extends({}, props, {\n    columns,\n    container,\n    direction,\n    item,\n    lg,\n    md,\n    sm,\n    rowSpacing,\n    columnSpacing,\n    wrap,\n    xl,\n    xs,\n    zeroMinWidth\n  });\n  const classes = useUtilityClasses(styleProps);\n  const wrapChild = element => columns !== 12 ? /*#__PURE__*/_jsx(GridContext.Provider, {\n    value: columns,\n    children: element\n  }) : element;\n  return wrapChild( /*#__PURE__*/_jsx(GridRoot, _extends({\n    styleProps: styleProps,\n    className: clsx(classes.root, className),\n    as: component,\n    ref: ref\n  }, other)));\n});\nprocess.env.NODE_ENV !== \"production\" ? Grid.propTypes\n/* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\r\n   * The content of the component.\r\n   */\n  children: PropTypes.node,\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   */\n  classes: PropTypes.object,\n  /**\r\n   * @ignore\r\n   */\n  className: PropTypes.string,\n  /**\r\n   * The number of columns.\r\n   * @default 12\r\n   */\n  columns: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number, PropTypes.object]),\n  /**\r\n   * Defines the horizontal space between the type `item` components.\r\n   * It overrides the value of the `spacing` prop.\r\n   */\n  columnSpacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n  /**\r\n   * The component used for the root node.\r\n   * Either a string to use a HTML element or a component.\r\n   */\n  component: PropTypes.elementType,\n  /**\r\n   * If `true`, the component will have the flex *container* behavior.\r\n   * You should be wrapping *items* with a *container*.\r\n   * @default false\r\n   */\n  container: PropTypes.bool,\n  /**\r\n   * Defines the `flex-direction` style property.\r\n   * It is applied for all screen sizes.\r\n   * @default 'row'\r\n   */\n  direction: PropTypes.oneOfType([PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row']), PropTypes.arrayOf(PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row'])), PropTypes.object]),\n  /**\r\n   * If `true`, the component will have the flex *item* behavior.\r\n   * You should be wrapping *items* with a *container*.\r\n   * @default false\r\n   */\n  item: PropTypes.bool,\n  /**\r\n   * Defines the number of grids the component is going to use.\r\n   * It's applied for the `lg` breakpoint and wider screens if not overridden.\r\n   * @default false\r\n   */\n  lg: PropTypes.oneOfType([PropTypes.oneOf(['auto', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]), PropTypes.bool]),\n  /**\r\n   * Defines the number of grids the component is going to use.\r\n   * It's applied for the `md` breakpoint and wider screens if not overridden.\r\n   * @default false\r\n   */\n  md: PropTypes.oneOfType([PropTypes.oneOf(['auto', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]), PropTypes.bool]),\n  /**\r\n   * Defines the vertical space between the type `item` components.\r\n   * It overrides the value of the `spacing` prop.\r\n   */\n  rowSpacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n  /**\r\n   * Defines the number of grids the component is going to use.\r\n   * It's applied for the `sm` breakpoint and wider screens if not overridden.\r\n   * @default false\r\n   */\n  sm: PropTypes.oneOfType([PropTypes.oneOf(['auto', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]), PropTypes.bool]),\n  /**\r\n   * Defines the space between the type `item` components.\r\n   * It can only be used on a type `container` component.\r\n   * @default 0\r\n   */\n  spacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n  /**\r\n   * The system prop that allows defining system overrides as well as additional CSS styles.\r\n   */\n  sx: PropTypes.object,\n  /**\r\n   * Defines the `flex-wrap` style property.\r\n   * It's applied for all screen sizes.\r\n   * @default 'wrap'\r\n   */\n  wrap: PropTypes.oneOf(['nowrap', 'wrap-reverse', 'wrap']),\n  /**\r\n   * Defines the number of grids the component is going to use.\r\n   * It's applied for the `xl` breakpoint and wider screens.\r\n   * @default false\r\n   */\n  xl: PropTypes.oneOfType([PropTypes.oneOf(['auto', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]), PropTypes.bool]),\n  /**\r\n   * Defines the number of grids the component is going to use.\r\n   * It's applied for all the screen sizes with the lowest priority.\r\n   * @default false\r\n   */\n  xs: PropTypes.oneOfType([PropTypes.oneOf(['auto', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]), PropTypes.bool]),\n  /**\r\n   * If `true`, it sets `min-width: 0` on the item.\r\n   * Refer to the limitations section of the documentation to better understand the use case.\r\n   * @default false\r\n   */\n  zeroMinWidth: PropTypes.bool\n} : void 0;\nif (process.env.NODE_ENV !== 'production') {\n  const requireProp = requirePropFactory('Grid', Grid); // eslint-disable-next-line no-useless-concat\n\n  Grid['propTypes' + ''] = _extends({}, Grid.propTypes, {\n    direction: requireProp('container'),\n    lg: requireProp('item'),\n    md: requireProp('item'),\n    sm: requireProp('item'),\n    spacing: requireProp('container'),\n    wrap: requireProp('container'),\n    xs: requireProp('item'),\n    zeroMinWidth: requireProp('item')\n  });\n}\nexport default Grid;","map":null,"metadata":{},"sourceType":"module"}