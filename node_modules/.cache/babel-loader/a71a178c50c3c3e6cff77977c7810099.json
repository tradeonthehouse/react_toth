{"ast":null,"code":"import { __read, __rest } from 'tslib';\nimport * as React from 'react';\nimport { useState, useRef, useEffect } from 'react';\nimport { LazyContext } from '../../context/LazyContext.js';\nimport { loadFeatures } from '../../motion/features/definitions.js';\n\n/**\r\n * Used in conjunction with the `m` component to reduce bundle size.\r\n *\r\n * `m` is a version of the `motion` component that only loads functionality\r\n * critical for the initial render.\r\n *\r\n * `LazyMotion` can then be used to either synchronously or asynchronously\r\n * load animation and gesture support.\r\n *\r\n * ```jsx\r\n * // Synchronous loading\r\n * import { LazyMotion, m, domAnimations } from \"framer-motion\"\r\n *\r\n * function App() {\r\n *   return (\r\n *     <LazyMotion features={domAnimations}>\r\n *       <m.div animate={{ scale: 2 }} />\r\n *     </LazyMotion>\r\n *   )\r\n * }\r\n *\r\n * // Asynchronous loading\r\n * import { LazyMotion, m } from \"framer-motion\"\r\n *\r\n * function App() {\r\n *   return (\r\n *     <LazyMotion features={() => import('./path/to/domAnimations')}>\r\n *       <m.div animate={{ scale: 2 }} />\r\n *     </LazyMotion>\r\n *   )\r\n * }\r\n * ```\r\n *\r\n * @public\r\n */\nfunction LazyMotion(_a) {\n  var children = _a.children,\n    features = _a.features,\n    _b = _a.strict,\n    strict = _b === void 0 ? false : _b;\n  var _c = __read(useState(!isLazyBundle(features)), 2),\n    setIsLoaded = _c[1];\n  var loadedRenderer = useRef(undefined);\n  /**\r\n   * If this is a synchronous load, load features immediately\r\n   */\n  if (!isLazyBundle(features)) {\n    var renderer = features.renderer,\n      loadedFeatures = __rest(features, [\"renderer\"]);\n    loadedRenderer.current = renderer;\n    loadFeatures(loadedFeatures);\n  }\n  useEffect(function () {\n    if (isLazyBundle(features)) {\n      features().then(function (_a) {\n        var renderer = _a.renderer,\n          loadedFeatures = __rest(_a, [\"renderer\"]);\n        loadFeatures(loadedFeatures);\n        loadedRenderer.current = renderer;\n        setIsLoaded(true);\n      });\n    }\n  }, []);\n  return React.createElement(LazyContext.Provider, {\n    value: {\n      renderer: loadedRenderer.current,\n      strict: strict\n    }\n  }, children);\n}\nfunction isLazyBundle(features) {\n  return typeof features === \"function\";\n}\nexport { LazyMotion };","map":null,"metadata":{},"sourceType":"module"}