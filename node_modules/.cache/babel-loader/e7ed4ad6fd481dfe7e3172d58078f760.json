{"ast":null,"code":"/* global __webpack_require__ */\nconst Refresh = require('react-refresh/runtime');\n\n/**\r\n * Extracts exports from a webpack module object.\r\n * @param {string} moduleId A Webpack module ID.\r\n * @returns {*} An exports object from the module.\r\n */\nfunction getModuleExports(moduleId) {\n  return __webpack_require__.c[moduleId].exports;\n}\n\n/**\r\n * Calculates the signature of a React refresh boundary.\r\n * If this signature changes, it's unsafe to accept the boundary.\r\n *\r\n * This implementation is based on the one in [Metro](https://github.com/facebook/metro/blob/907d6af22ac6ebe58572be418e9253a90665ecbd/packages/metro/src/lib/polyfills/require.js#L795-L816).\r\n * @param {*} moduleExports A Webpack module exports object.\r\n * @returns {string[]} A React refresh boundary signature array.\r\n */\nfunction getReactRefreshBoundarySignature(moduleExports) {\n  const signature = [];\n  signature.push(Refresh.getFamilyByType(moduleExports));\n  if (moduleExports == null || typeof moduleExports !== 'object') {\n    // Exit if we can't iterate over exports.\n    return signature;\n  }\n  for (let key in moduleExports) {\n    if (key === '__esModule') {\n      continue;\n    }\n    signature.push(key);\n    signature.push(Refresh.getFamilyByType(moduleExports[key]));\n  }\n  return signature;\n}\n\n/**\r\n * Creates a helper that performs a delayed React refresh.\r\n * @returns {enqueueUpdate} A debounced React refresh function.\r\n */\nfunction createDebounceUpdate() {\n  /**\r\n   * A cached setTimeout handler.\r\n   * @type {number | undefined}\r\n   */\n  let refreshTimeout;\n\n  /**\r\n   * Performs react refresh on a delay and clears the error overlay.\r\n   * @param {function(): void} callback\r\n   * @returns {void}\r\n   */\n  function enqueueUpdate(callback) {\n    if (typeof refreshTimeout === 'undefined') {\n      refreshTimeout = setTimeout(function () {\n        refreshTimeout = undefined;\n        Refresh.performReactRefresh();\n        callback();\n      }, 30);\n    }\n  }\n  return enqueueUpdate;\n}\n\n/**\r\n * Checks if all exports are likely a React component.\r\n *\r\n * This implementation is based on the one in [Metro](https://github.com/facebook/metro/blob/febdba2383113c88296c61e28e4ef6a7f4939fda/packages/metro/src/lib/polyfills/require.js#L748-L774).\r\n * @param {*} moduleExports A Webpack module exports object.\r\n * @returns {boolean} Whether the exports are React component like.\r\n */\nfunction isReactRefreshBoundary(moduleExports) {\n  if (Refresh.isLikelyComponentType(moduleExports)) {\n    return true;\n  }\n  if (moduleExports === undefined || moduleExports === null || typeof moduleExports !== 'object') {\n    // Exit if we can't iterate over exports.\n    return false;\n  }\n  let hasExports = false;\n  let areAllExportsComponents = true;\n  for (let key in moduleExports) {\n    hasExports = true;\n\n    // This is the ES Module indicator flag\n    if (key === '__esModule') {\n      continue;\n    }\n\n    // We can (and have to) safely execute getters here,\n    // as Webpack manually assigns harmony exports to getters,\n    // without any side-effects attached.\n    // Ref: https://github.com/webpack/webpack/blob/b93048643fe74de2a6931755911da1212df55897/lib/MainTemplate.js#L281\n    const exportValue = moduleExports[key];\n    if (!Refresh.isLikelyComponentType(exportValue)) {\n      areAllExportsComponents = false;\n    }\n  }\n  return hasExports && areAllExportsComponents;\n}\n\n/**\r\n * Checks if exports are likely a React component and registers them.\r\n *\r\n * This implementation is based on the one in [Metro](https://github.com/facebook/metro/blob/febdba2383113c88296c61e28e4ef6a7f4939fda/packages/metro/src/lib/polyfills/require.js#L818-L835).\r\n * @param {*} moduleExports A Webpack module exports object.\r\n * @param {string} moduleId A Webpack module ID.\r\n * @returns {void}\r\n */\nfunction registerExportsForReactRefresh(moduleExports, moduleId) {\n  if (Refresh.isLikelyComponentType(moduleExports)) {\n    // Register module.exports if it is likely a component\n    Refresh.register(moduleExports, moduleId + ' %exports%');\n  }\n  if (moduleExports === undefined || moduleExports === null || typeof moduleExports !== 'object') {\n    // Exit if we can't iterate over the exports.\n    return;\n  }\n  for (let key in moduleExports) {\n    // Skip registering the ES Module indicator\n    if (key === '__esModule') {\n      continue;\n    }\n    const exportValue = moduleExports[key];\n    if (Refresh.isLikelyComponentType(exportValue)) {\n      const typeID = moduleId + ' %exports% ' + key;\n      Refresh.register(exportValue, typeID);\n    }\n  }\n}\n\n/**\r\n * Compares previous and next module objects to check for mutated boundaries.\r\n *\r\n * This implementation is based on the one in [Metro](https://github.com/facebook/metro/blob/907d6af22ac6ebe58572be418e9253a90665ecbd/packages/metro/src/lib/polyfills/require.js#L776-L792).\r\n * @param {*} prevExports The current Webpack module exports object.\r\n * @param {*} nextExports The next Webpack module exports object.\r\n * @returns {boolean} Whether the React refresh boundary should be invalidated.\r\n */\nfunction shouldInvalidateReactRefreshBoundary(prevExports, nextExports) {\n  const prevSignature = getReactRefreshBoundarySignature(prevExports);\n  const nextSignature = getReactRefreshBoundarySignature(nextExports);\n  if (prevSignature.length !== nextSignature.length) {\n    return true;\n  }\n  for (let i = 0; i < nextSignature.length; i += 1) {\n    if (prevSignature[i] !== nextSignature[i]) {\n      return true;\n    }\n  }\n  return false;\n}\nmodule.exports = Object.freeze({\n  enqueueUpdate: createDebounceUpdate(),\n  getModuleExports: getModuleExports,\n  isReactRefreshBoundary: isReactRefreshBoundary,\n  shouldInvalidateReactRefreshBoundary: shouldInvalidateReactRefreshBoundary,\n  registerExportsForReactRefresh: registerExportsForReactRefresh\n});","map":null,"metadata":{},"sourceType":"script"}