{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"anchorOrigin\", \"classes\", \"badgeContent\", \"component\", \"children\", \"className\", \"components\", \"componentsProps\", \"invisible\", \"max\", \"overlap\", \"showZero\", \"variant\", \"theme\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_capitalize as capitalize, usePreviousProps } from '@material-ui/utils';\nimport isHostComponent from '../utils/isHostComponent';\nimport composeClasses from '../composeClasses';\nimport { getBadgeUtilityClass } from './badgeUnstyledClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar useUtilityClasses = function useUtilityClasses(styleProps) {\n  var variant = styleProps.variant,\n    anchorOrigin = styleProps.anchorOrigin,\n    overlap = styleProps.overlap,\n    invisible = styleProps.invisible,\n    classes = styleProps.classes;\n  var slots = {\n    root: ['root'],\n    badge: ['badge', variant, \"anchorOrigin\".concat(capitalize(anchorOrigin.vertical)).concat(capitalize(anchorOrigin.horizontal)).concat(capitalize(overlap)), invisible && 'invisible']\n  };\n  return composeClasses(slots, getBadgeUtilityClass, classes);\n};\nvar BadgeUnstyled = /*#__PURE__*/React.forwardRef(function BadgeUnstyled(props, ref) {\n  var _props$anchorOrigin = props.anchorOrigin,\n    anchorOriginProp = _props$anchorOrigin === void 0 ? {\n      vertical: 'top',\n      horizontal: 'right'\n    } : _props$anchorOrigin,\n    classesProp = props.classes,\n    badgeContentProp = props.badgeContent,\n    _props$component = props.component,\n    component = _props$component === void 0 ? 'span' : _props$component,\n    children = props.children,\n    className = props.className,\n    _props$components = props.components,\n    components = _props$components === void 0 ? {} : _props$components,\n    _props$componentsProp = props.componentsProps,\n    componentsProps = _props$componentsProp === void 0 ? {} : _props$componentsProp,\n    invisibleProp = props.invisible,\n    _props$max = props.max,\n    maxProp = _props$max === void 0 ? 99 : _props$max,\n    _props$overlap = props.overlap,\n    overlapProp = _props$overlap === void 0 ? 'rectangular' : _props$overlap,\n    _props$showZero = props.showZero,\n    showZero = _props$showZero === void 0 ? false : _props$showZero,\n    _props$variant = props.variant,\n    variantProp = _props$variant === void 0 ? 'standard' : _props$variant,\n    theme = props.theme,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  var prevProps = usePreviousProps({\n    anchorOrigin: anchorOriginProp,\n    badgeContent: badgeContentProp,\n    max: maxProp,\n    overlap: overlapProp,\n    variant: variantProp\n  });\n  var invisible = invisibleProp;\n  if (invisibleProp == null && (badgeContentProp === 0 && !showZero || badgeContentProp == null && variantProp !== 'dot')) {\n    invisible = true;\n  }\n  var _ref = invisible ? prevProps : props,\n    _ref$anchorOrigin = _ref.anchorOrigin,\n    anchorOrigin = _ref$anchorOrigin === void 0 ? anchorOriginProp : _ref$anchorOrigin,\n    badgeContent = _ref.badgeContent,\n    _ref$max = _ref.max,\n    max = _ref$max === void 0 ? maxProp : _ref$max,\n    _ref$overlap = _ref.overlap,\n    overlap = _ref$overlap === void 0 ? overlapProp : _ref$overlap,\n    _ref$variant = _ref.variant,\n    variant = _ref$variant === void 0 ? variantProp : _ref$variant;\n  var styleProps = _extends({}, props, {\n    anchorOrigin: anchorOrigin,\n    badgeContent: badgeContent,\n    classes: classesProp,\n    invisible: invisible,\n    max: max,\n    overlap: overlap,\n    variant: variant\n  });\n  var displayValue = '';\n  if (variant !== 'dot') {\n    displayValue = badgeContent > max ? \"\".concat(max, \"+\") : badgeContent;\n  }\n  var classes = useUtilityClasses(styleProps);\n  var Root = components.Root || component;\n  var rootProps = componentsProps.root || {};\n  var Badge = components.Badge || 'span';\n  var badgeProps = componentsProps.badge || {};\n  return /*#__PURE__*/_jsxs(Root, _extends({}, rootProps, !isHostComponent(Root) && {\n    as: component,\n    styleProps: _extends({}, styleProps, rootProps.styleProps),\n    theme: theme\n  }, {\n    ref: ref\n  }, other, {\n    className: clsx(classes.root, rootProps.className, className),\n    children: [children, /*#__PURE__*/_jsx(Badge, _extends({}, badgeProps, !isHostComponent(Badge) && {\n      styleProps: _extends({}, styleProps, badgeProps.styleProps),\n      theme: theme\n    }, {\n      className: clsx(classes.badge, badgeProps.className),\n      children: displayValue\n    }))]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? BadgeUnstyled.propTypes\n/* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The anchor of the badge.\n   * @default {\n   *   vertical: 'top',\n   *   horizontal: 'right',\n   * }\n   */\n  anchorOrigin: PropTypes.shape({\n    horizontal: PropTypes.oneOf(['left', 'right']).isRequired,\n    vertical: PropTypes.oneOf(['bottom', 'top']).isRequired\n  }),\n  /**\n   * The content rendered within the badge.\n   */\n  badgeContent: PropTypes.node,\n  /**\n   * The badge will be added relative to this node.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The components used for each slot inside the Badge.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.shape({\n    Badge: PropTypes.elementType,\n    Root: PropTypes.elementType\n  }),\n  /**\n   * The props used for each slot inside the Badge.\n   * @default {}\n   */\n  componentsProps: PropTypes.object,\n  /**\n   * If `true`, the badge is invisible.\n   */\n  invisible: PropTypes.bool,\n  /**\n   * Max count to show.\n   * @default 99\n   */\n  max: PropTypes.number,\n  /**\n   * Wrapped shape the badge should overlap.\n   * @default 'rectangular'\n   */\n  overlap: PropTypes.oneOf(['circular', 'rectangular']),\n  /**\n   * Controls whether the badge is hidden when `badgeContent` is zero.\n   * @default false\n   */\n  showZero: PropTypes.bool,\n  /**\n   * The variant to use.\n   * @default 'standard'\n   */\n  variant: PropTypes.string\n} : void 0;\nexport default BadgeUnstyled;","map":null,"metadata":{},"sourceType":"module"}