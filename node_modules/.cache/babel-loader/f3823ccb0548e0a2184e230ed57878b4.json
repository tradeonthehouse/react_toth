{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"color\", \"edge\", \"size\", \"sx\"];\n// @inheritedComponent IconButton\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport { unstable_composeClasses as composeClasses } from '@material-ui/unstyled';\nimport { alpha, darken, lighten } from '@material-ui/system';\nimport capitalize from '../utils/capitalize';\nimport SwitchBase from '../internal/SwitchBase';\nimport useThemeProps from '../styles/useThemeProps';\nimport styled from '../styles/styled';\nimport switchClasses, { getSwitchUtilityClass } from './switchClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = styleProps => {\n  const {\n    classes,\n    edge,\n    size,\n    color,\n    checked,\n    disabled\n  } = styleProps;\n  const slots = {\n    root: ['root', edge && `edge${capitalize(edge)}`, `size${capitalize(size)}`],\n    switchBase: ['switchBase', `color${capitalize(color)}`, checked && 'checked', disabled && 'disabled'],\n    thumb: ['thumb'],\n    track: ['track'],\n    input: ['input']\n  };\n  const composedClasses = composeClasses(slots, getSwitchUtilityClass, classes);\n  return _extends({}, classes, composedClasses);\n};\nconst SwitchRoot = styled('span', {\n  name: 'MuiSwitch',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      styleProps\n    } = props;\n    return [styles.root, styleProps.edge && styles[`edge${capitalize(styleProps.edge)}`], styles[`size${capitalize(styleProps.size)}`]];\n  }\n})(_ref => {\n  let {\n    styleProps\n  } = _ref;\n  return _extends({\n    /* Styles applied to the root element. */\n    display: 'inline-flex',\n    width: 34 + 12 * 2,\n    height: 14 + 12 * 2,\n    overflow: 'hidden',\n    padding: 12,\n    boxSizing: 'border-box',\n    position: 'relative',\n    flexShrink: 0,\n    zIndex: 0,\n    // Reset the stacking context.\n    verticalAlign: 'middle',\n    // For correct alignment with the text.\n    '@media print': {\n      colorAdjust: 'exact'\n    }\n  }, styleProps.edge === 'start' && {\n    marginLeft: -8\n  }, styleProps.edge === 'end' && {\n    marginRight: -8\n  }, styleProps.size === 'small' && {\n    width: 40,\n    height: 24,\n    padding: 7,\n    [`& .${switchClasses.thumb}`]: {\n      width: 16,\n      height: 16\n    },\n    [`& .${switchClasses.switchBase}`]: {\n      padding: 4,\n      [`&.${switchClasses.checked}`]: {\n        transform: 'translateX(16px)'\n      }\n    }\n  });\n});\nconst SwitchSwitchBase = styled(SwitchBase, {\n  name: 'MuiSwitch',\n  slot: 'SwitchBase',\n  overridesResolver: (props, styles) => {\n    const {\n      styleProps\n    } = props;\n    return [styles.switchBase, styles.input, styleProps.color !== 'default' && styles[`color${capitalize(styleProps.color)}`]];\n  }\n})(_ref2 => {\n  let {\n    theme\n  } = _ref2;\n  return {\n    /* Styles applied to the internal `SwitchBase` component's `root` class. */\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    zIndex: 1,\n    // Render above the focus ripple.\n    color: theme.palette.mode === 'light' ? theme.palette.common.white : theme.palette.grey[300],\n    transition: theme.transitions.create(['left', 'transform'], {\n      duration: theme.transitions.duration.shortest\n    }),\n    [`&.${switchClasses.checked}`]: {\n      transform: 'translateX(20px)'\n    },\n    [`&.${switchClasses.disabled}`]: {\n      color: theme.palette.mode === 'light' ? theme.palette.grey[100] : theme.palette.grey[600]\n    },\n    [`&.${switchClasses.checked} + .${switchClasses.track}`]: {\n      opacity: 0.5\n    },\n    [`&.${switchClasses.disabled} + .${switchClasses.track}`]: {\n      opacity: theme.palette.mode === 'light' ? 0.12 : 0.2\n    },\n    [`& .${switchClasses.input}`]: {\n      /* Styles applied to the internal SwitchBase component's input element. */\n      left: '-100%',\n      width: '300%'\n    }\n  };\n}, _ref3 => {\n  let {\n    theme,\n    styleProps\n  } = _ref3;\n  return _extends({\n    '&:hover': {\n      backgroundColor: alpha(theme.palette.action.active, theme.palette.action.hoverOpacity),\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    }\n  }, styleProps.color !== 'default' && {\n    [`&.${switchClasses.checked}`]: {\n      color: theme.palette[styleProps.color].main,\n      '&:hover': {\n        backgroundColor: alpha(theme.palette[styleProps.color].main, theme.palette.action.hoverOpacity),\n        '@media (hover: none)': {\n          backgroundColor: 'transparent'\n        }\n      },\n      [`&.${switchClasses.disabled}`]: {\n        color: theme.palette.mode === 'light' ? lighten(theme.palette[styleProps.color].main, 0.62) : darken(theme.palette[styleProps.color].main, 0.55)\n      }\n    },\n    [`&.${switchClasses.checked} + .${switchClasses.track}`]: {\n      backgroundColor: theme.palette[styleProps.color].main\n    }\n  });\n});\nconst SwitchTrack = styled('span', {\n  name: 'MuiSwitch',\n  slot: 'Track',\n  overridesResolver: (props, styles) => styles.track\n})(_ref4 => {\n  let {\n    theme\n  } = _ref4;\n  return {\n    /* Styles applied to the track element. */\n    height: '100%',\n    width: '100%',\n    borderRadius: 14 / 2,\n    zIndex: -1,\n    transition: theme.transitions.create(['opacity', 'background-color'], {\n      duration: theme.transitions.duration.shortest\n    }),\n    backgroundColor: theme.palette.mode === 'light' ? theme.palette.common.black : theme.palette.common.white,\n    opacity: theme.palette.mode === 'light' ? 0.38 : 0.3\n  };\n});\nconst SwitchThumb = styled('span', {\n  name: 'MuiSwitch',\n  slot: 'Thumb',\n  overridesResolver: (props, styles) => styles.thumb\n})(_ref5 => {\n  let {\n    theme\n  } = _ref5;\n  return {\n    /* Styles used to create the thumb passed to the internal `SwitchBase` component `icon` prop. */\n    boxShadow: theme.shadows[1],\n    backgroundColor: 'currentColor',\n    width: 20,\n    height: 20,\n    borderRadius: '50%'\n  };\n});\nconst Switch = /*#__PURE__*/React.forwardRef(function Switch(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiSwitch'\n  });\n  const {\n      className,\n      color = 'primary',\n      edge = false,\n      size = 'medium',\n      sx\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const styleProps = _extends({}, props, {\n    color,\n    edge,\n    size\n  });\n  const classes = useUtilityClasses(styleProps);\n  const icon = /*#__PURE__*/_jsx(SwitchThumb, {\n    className: classes.thumb,\n    styleProps: styleProps\n  });\n  return /*#__PURE__*/_jsxs(SwitchRoot, {\n    className: clsx(classes.root, className),\n    sx: sx,\n    styleProps: styleProps,\n    children: [/*#__PURE__*/_jsx(SwitchSwitchBase, _extends({\n      type: \"checkbox\",\n      icon: icon,\n      checkedIcon: icon,\n      ref: ref,\n      styleProps: styleProps\n    }, other, {\n      classes: _extends({}, classes, {\n        root: classes.switchBase\n      })\n    })), /*#__PURE__*/_jsx(SwitchTrack, {\n      className: classes.track,\n      styleProps: styleProps\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Switch.propTypes\n/* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\r\n   * If `true`, the component is checked.\r\n   */\n  checked: PropTypes.bool,\n  /**\r\n   * The icon to display when the component is checked.\r\n   */\n  checkedIcon: PropTypes.node,\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   */\n  classes: PropTypes.object,\n  /**\r\n   * @ignore\r\n   */\n  className: PropTypes.string,\n  /**\r\n   * The color of the component. It supports those theme colors that make sense for this component.\r\n   * @default 'primary'\r\n   */\n  color: PropTypes\n  /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\r\n   * The default checked state. Use when the component is not controlled.\r\n   */\n  defaultChecked: PropTypes.bool,\n  /**\r\n   * If `true`, the component is disabled.\r\n   */\n  disabled: PropTypes.bool,\n  /**\r\n   * If `true`, the ripple effect is disabled.\r\n   */\n  disableRipple: PropTypes.bool,\n  /**\r\n   * If given, uses a negative margin to counteract the padding on one\r\n   * side (this is often helpful for aligning the left or right\r\n   * side of the icon with content above or below, without ruining the border\r\n   * size and shape).\r\n   * @default false\r\n   */\n  edge: PropTypes.oneOf(['end', 'start', false]),\n  /**\r\n   * The icon to display when the component is unchecked.\r\n   */\n  icon: PropTypes.node,\n  /**\r\n   * The id of the `input` element.\r\n   */\n  id: PropTypes.string,\n  /**\r\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\r\n   */\n  inputProps: PropTypes.object,\n  /**\r\n   * Pass a ref to the `input` element.\r\n   */\n  inputRef: refType,\n  /**\r\n   * Callback fired when the state is changed.\r\n   *\r\n   * @param {object} event The event source of the callback.\r\n   * You can pull out the new value by accessing `event.target.value` (string).\r\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\r\n   */\n  onChange: PropTypes.func,\n  /**\r\n   * If `true`, the `input` element is required.\r\n   */\n  required: PropTypes.bool,\n  /**\r\n   * The size of the component.\r\n   * `small` is equivalent to the dense switch styling.\r\n   * @default 'medium'\r\n   */\n  size: PropTypes\n  /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),\n  /**\r\n   * The system prop that allows defining system overrides as well as additional CSS styles.\r\n   */\n  sx: PropTypes.object,\n  /**\r\n   * The value of the component. The DOM API casts this to a string.\r\n   * The browser uses \"on\" as the default value.\r\n   */\n  value: PropTypes.any\n} : void 0;\nexport default Switch;","map":null,"metadata":{},"sourceType":"module"}