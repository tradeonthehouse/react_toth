{"ast":null,"code":"import _defineProperty from \"C:/Users/Vishal/Desktop/django backend/api-server-django/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport merge from '../merge';\nimport getThemeValue, { propToStyleFunction } from '../getThemeValue';\nimport { handleBreakpoints, createEmptyBreakpointObject, removeUnusedBreakpoints } from '../breakpoints';\nfunction objectsHaveSameKeys() {\n  for (var _len = arguments.length, objects = new Array(_len), _key = 0; _key < _len; _key++) {\n    objects[_key] = arguments[_key];\n  }\n  var allKeys = objects.reduce(function (keys, object) {\n    return keys.concat(Object.keys(object));\n  }, []);\n  var union = new Set(allKeys);\n  return objects.every(function (object) {\n    return union.size === Object.keys(object).length;\n  });\n}\nfunction callIfFn(maybeFn, arg) {\n  return typeof maybeFn === 'function' ? maybeFn(arg) : maybeFn;\n}\nfunction styleFunctionSx(props) {\n  var _ref = props || {},\n    styles = _ref.sx,\n    _ref$theme = _ref.theme,\n    theme = _ref$theme === void 0 ? {} : _ref$theme;\n  if (!styles) return null;\n  if (typeof styles === 'function') {\n    return styles(theme);\n  }\n  if (typeof styles !== 'object') {\n    // value\n    return styles;\n  }\n  var emptyBreakpoints = createEmptyBreakpointObject(theme.breakpoints);\n  var breakpointsKeys = Object.keys(emptyBreakpoints);\n  var css = emptyBreakpoints;\n  Object.keys(styles).forEach(function (styleKey) {\n    var value = callIfFn(styles[styleKey], theme);\n    if (typeof value === 'object') {\n      if (propToStyleFunction[styleKey]) {\n        css = merge(css, getThemeValue(styleKey, value, theme));\n      } else {\n        var breakpointsValues = handleBreakpoints({\n          theme: theme\n        }, value, function (x) {\n          return _defineProperty({}, styleKey, x);\n        });\n        if (objectsHaveSameKeys(breakpointsValues, value)) {\n          css[styleKey] = styleFunctionSx({\n            sx: value,\n            theme: theme\n          });\n        } else {\n          css = merge(css, breakpointsValues);\n        }\n      }\n    } else {\n      css = merge(css, getThemeValue(styleKey, value, theme));\n    }\n  });\n  return removeUnusedBreakpoints(breakpointsKeys, css);\n}\nstyleFunctionSx.filterProps = ['sx'];\nexport default styleFunctionSx;","map":null,"metadata":{},"sourceType":"module"}