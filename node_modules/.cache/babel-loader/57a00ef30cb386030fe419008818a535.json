{"ast":null,"code":"import _toConsumableArray from \"C:/Users/Vishal/Desktop/django backend/api-server-django/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"C:/Users/Vishal/Desktop/django backend/api-server-django/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"aria-label\", \"aria-labelledby\", \"aria-valuetext\", \"className\", \"component\", \"classes\", \"defaultValue\", \"disableSwap\", \"disabled\", \"getAriaLabel\", \"getAriaValueText\", \"marks\", \"max\", \"min\", \"name\", \"onChange\", \"onChangeCommitted\", \"onMouseDown\", \"orientation\", \"scale\", \"step\", \"tabIndex\", \"track\", \"value\", \"valueLabelDisplay\", \"valueLabelFormat\", \"isRtl\", \"components\", \"componentsProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes, unstable_useIsFocusVisible as useIsFocusVisible, unstable_useEnhancedEffect as useEnhancedEffect, unstable_ownerDocument as ownerDocument, unstable_useEventCallback as useEventCallback, unstable_useForkRef as useForkRef, unstable_useControlled as useControlled, visuallyHidden } from '@material-ui/utils';\nimport isHostComponent from '../utils/isHostComponent';\nimport composeClasses from '../composeClasses';\nimport { getSliderUtilityClass } from './sliderUnstyledClasses';\nimport SliderValueLabelUnstyled from './SliderValueLabelUnstyled';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar INTENTIONAL_DRAG_COUNT_THRESHOLD = 2;\nfunction asc(a, b) {\n  return a - b;\n}\nfunction clamp(value, min, max) {\n  if (value == null) {\n    return min;\n  }\n  return Math.min(Math.max(min, value), max);\n}\nfunction findClosest(values, currentValue) {\n  var _values$reduce = values.reduce(function (acc, value, index) {\n      var distance = Math.abs(currentValue - value);\n      if (acc === null || distance < acc.distance || distance === acc.distance) {\n        return {\n          distance: distance,\n          index: index\n        };\n      }\n      return acc;\n    }, null),\n    closestIndex = _values$reduce.index;\n  return closestIndex;\n}\nfunction trackFinger(event, touchId) {\n  if (touchId.current !== undefined && event.changedTouches) {\n    for (var i = 0; i < event.changedTouches.length; i += 1) {\n      var touch = event.changedTouches[i];\n      if (touch.identifier === touchId.current) {\n        return {\n          x: touch.clientX,\n          y: touch.clientY\n        };\n      }\n    }\n    return false;\n  }\n  return {\n    x: event.clientX,\n    y: event.clientY\n  };\n}\nfunction valueToPercent(value, min, max) {\n  return (value - min) * 100 / (max - min);\n}\nfunction percentToValue(percent, min, max) {\n  return (max - min) * percent + min;\n}\nfunction getDecimalPrecision(num) {\n  // This handles the case when num is very small (0.00000001), js will turn this into 1e-8.\n  // When num is bigger than 1 or less than -1 it won't get converted to this notation so it's fine.\n  if (Math.abs(num) < 1) {\n    var parts = num.toExponential().split('e-');\n    var matissaDecimalPart = parts[0].split('.')[1];\n    return (matissaDecimalPart ? matissaDecimalPart.length : 0) + parseInt(parts[1], 10);\n  }\n  var decimalPart = num.toString().split('.')[1];\n  return decimalPart ? decimalPart.length : 0;\n}\nfunction roundValueToStep(value, step, min) {\n  var nearest = Math.round((value - min) / step) * step + min;\n  return Number(nearest.toFixed(getDecimalPrecision(step)));\n}\nfunction setValueIndex(_ref) {\n  var values = _ref.values,\n    source = _ref.source,\n    newValue = _ref.newValue,\n    index = _ref.index;\n  // Performance shortcut\n  if (source[index] === newValue) {\n    return source;\n  }\n  var output = values.slice();\n  output[index] = newValue;\n  return output;\n}\nfunction focusThumb(_ref2) {\n  var sliderRef = _ref2.sliderRef,\n    activeIndex = _ref2.activeIndex,\n    setActive = _ref2.setActive;\n  var doc = ownerDocument(sliderRef.current);\n  if (!sliderRef.current.contains(doc.activeElement) || Number(doc.activeElement.getAttribute('data-index')) !== activeIndex) {\n    sliderRef.current.querySelector(\"[type=\\\"range\\\"][data-index=\\\"\".concat(activeIndex, \"\\\"]\")).focus();\n  }\n  if (setActive) {\n    setActive(activeIndex);\n  }\n}\nvar axisProps = {\n  horizontal: {\n    offset: function offset(percent) {\n      return {\n        left: \"\".concat(percent, \"%\")\n      };\n    },\n    leap: function leap(percent) {\n      return {\n        width: \"\".concat(percent, \"%\")\n      };\n    }\n  },\n  'horizontal-reverse': {\n    offset: function offset(percent) {\n      return {\n        right: \"\".concat(percent, \"%\")\n      };\n    },\n    leap: function leap(percent) {\n      return {\n        width: \"\".concat(percent, \"%\")\n      };\n    }\n  },\n  vertical: {\n    offset: function offset(percent) {\n      return {\n        bottom: \"\".concat(percent, \"%\")\n      };\n    },\n    leap: function leap(percent) {\n      return {\n        height: \"\".concat(percent, \"%\")\n      };\n    }\n  }\n};\nvar Identity = function Identity(x) {\n  return x;\n}; // TODO: remove support for Safari < 13.\n// https://caniuse.com/#search=touch-action\n//\n// Safari, on iOS, supports touch action since v13.\n// Over 80% of the iOS phones are compatible\n// in August 2020.\n\nvar cachedSupportsTouchActionNone;\nfunction doesSupportTouchActionNone() {\n  if (cachedSupportsTouchActionNone === undefined) {\n    var element = document.createElement('div');\n    element.style.touchAction = 'none';\n    document.body.appendChild(element);\n    cachedSupportsTouchActionNone = window.getComputedStyle(element).touchAction === 'none';\n    element.parentElement.removeChild(element);\n  }\n  return cachedSupportsTouchActionNone;\n}\nvar useUtilityClasses = function useUtilityClasses(styleProps) {\n  var disabled = styleProps.disabled,\n    dragging = styleProps.dragging,\n    marked = styleProps.marked,\n    orientation = styleProps.orientation,\n    track = styleProps.track,\n    classes = styleProps.classes;\n  var slots = {\n    root: ['root', disabled && 'disabled', dragging && 'dragging', marked && 'marked', orientation === 'vertical' && 'vertical', track === 'inverted' && 'trackInverted', track === false && 'trackFalse'],\n    rail: ['rail'],\n    track: ['track'],\n    mark: ['mark'],\n    markActive: ['markActive'],\n    markLabel: ['markLabel'],\n    markLabelActive: ['markLabelActive'],\n    valueLabel: ['valueLabel'],\n    thumb: ['thumb', disabled && 'disabled'],\n    active: ['active'],\n    disabled: ['disabled'],\n    focusVisible: ['focusVisible']\n  };\n  return composeClasses(slots, getSliderUtilityClass, classes);\n};\nvar Forward = function Forward(_ref3) {\n  var children = _ref3.children;\n  return children;\n};\nvar SliderUnstyled = /*#__PURE__*/React.forwardRef(function SliderUnstyled(props, ref) {\n  var ariaLabel = props['aria-label'],\n    ariaLabelledby = props['aria-labelledby'],\n    ariaValuetext = props['aria-valuetext'],\n    className = props.className,\n    _props$component = props.component,\n    component = _props$component === void 0 ? 'span' : _props$component,\n    classesProp = props.classes,\n    defaultValue = props.defaultValue,\n    _props$disableSwap = props.disableSwap,\n    disableSwap = _props$disableSwap === void 0 ? false : _props$disableSwap,\n    _props$disabled = props.disabled,\n    disabled = _props$disabled === void 0 ? false : _props$disabled,\n    getAriaLabel = props.getAriaLabel,\n    getAriaValueText = props.getAriaValueText,\n    _props$marks = props.marks,\n    marksProp = _props$marks === void 0 ? false : _props$marks,\n    _props$max = props.max,\n    max = _props$max === void 0 ? 100 : _props$max,\n    _props$min = props.min,\n    min = _props$min === void 0 ? 0 : _props$min,\n    name = props.name,\n    onChange = props.onChange,\n    onChangeCommitted = props.onChangeCommitted,\n    onMouseDown = props.onMouseDown,\n    _props$orientation = props.orientation,\n    orientation = _props$orientation === void 0 ? 'horizontal' : _props$orientation,\n    _props$scale = props.scale,\n    scale = _props$scale === void 0 ? Identity : _props$scale,\n    _props$step = props.step,\n    step = _props$step === void 0 ? 1 : _props$step,\n    tabIndex = props.tabIndex,\n    _props$track = props.track,\n    track = _props$track === void 0 ? 'normal' : _props$track,\n    valueProp = props.value,\n    _props$valueLabelDisp = props.valueLabelDisplay,\n    valueLabelDisplay = _props$valueLabelDisp === void 0 ? 'off' : _props$valueLabelDisp,\n    _props$valueLabelForm = props.valueLabelFormat,\n    valueLabelFormat = _props$valueLabelForm === void 0 ? Identity : _props$valueLabelForm,\n    _props$isRtl = props.isRtl,\n    isRtl = _props$isRtl === void 0 ? false : _props$isRtl,\n    _props$components = props.components,\n    components = _props$components === void 0 ? {} : _props$components,\n    _props$componentsProp = props.componentsProps,\n    componentsProps = _props$componentsProp === void 0 ? {} : _props$componentsProp,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  var touchId = React.useRef(); // We can't use the :active browser pseudo-classes.\n  // - The active state isn't triggered when clicking on the rail.\n  // - The active state isn't transferred when inversing a range slider.\n\n  var _React$useState = React.useState(-1),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    active = _React$useState2[0],\n    setActive = _React$useState2[1];\n  var _React$useState3 = React.useState(-1),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    open = _React$useState4[0],\n    setOpen = _React$useState4[1];\n  var _React$useState5 = React.useState(false),\n    _React$useState6 = _slicedToArray(_React$useState5, 2),\n    dragging = _React$useState6[0],\n    setDragging = _React$useState6[1];\n  var moveCount = React.useRef(0);\n  var _useControlled = useControlled({\n      controlled: valueProp,\n      default: defaultValue != null ? defaultValue : min,\n      name: 'Slider'\n    }),\n    _useControlled2 = _slicedToArray(_useControlled, 2),\n    valueDerived = _useControlled2[0],\n    setValueState = _useControlled2[1];\n  var handleChange = onChange && function (event, value, thumbIndex) {\n    // Redefine target to allow name and value to be read.\n    // This allows seamless integration with the most popular form libraries.\n    // https://github.com/mui-org/material-ui/issues/13485#issuecomment-676048492\n    // Clone the event to not override `target` of the original event.\n    var nativeEvent = event.nativeEvent || event;\n    var clonedEvent = new nativeEvent.constructor(nativeEvent.type, nativeEvent);\n    Object.defineProperty(clonedEvent, 'target', {\n      writable: true,\n      value: {\n        value: value,\n        name: name\n      }\n    });\n    onChange(clonedEvent, value, thumbIndex);\n  };\n  var range = Array.isArray(valueDerived);\n  var values = range ? valueDerived.slice().sort(asc) : [valueDerived];\n  values = values.map(function (value) {\n    return clamp(value, min, max);\n  });\n  var marks = marksProp === true && step !== null ? _toConsumableArray(Array(Math.floor((max - min) / step) + 1)).map(function (_, index) {\n    return {\n      value: min + step * index\n    };\n  }) : marksProp || [];\n  var _useIsFocusVisible = useIsFocusVisible(),\n    isFocusVisibleRef = _useIsFocusVisible.isFocusVisibleRef,\n    handleBlurVisible = _useIsFocusVisible.onBlur,\n    handleFocusVisible = _useIsFocusVisible.onFocus,\n    focusVisibleRef = _useIsFocusVisible.ref;\n  var _React$useState7 = React.useState(-1),\n    _React$useState8 = _slicedToArray(_React$useState7, 2),\n    focusVisible = _React$useState8[0],\n    setFocusVisible = _React$useState8[1];\n  var sliderRef = React.useRef();\n  var handleFocusRef = useForkRef(focusVisibleRef, sliderRef);\n  var handleRef = useForkRef(ref, handleFocusRef);\n  var handleFocus = useEventCallback(function (event) {\n    var index = Number(event.currentTarget.getAttribute('data-index'));\n    handleFocusVisible(event);\n    if (isFocusVisibleRef.current === true) {\n      setFocusVisible(index);\n    }\n    setOpen(index);\n  });\n  var handleBlur = useEventCallback(function (event) {\n    handleBlurVisible(event);\n    if (isFocusVisibleRef.current === false) {\n      setFocusVisible(-1);\n    }\n    setOpen(-1);\n  });\n  var handleMouseOver = useEventCallback(function (event) {\n    var index = Number(event.currentTarget.getAttribute('data-index'));\n    setOpen(index);\n  });\n  var handleMouseLeave = useEventCallback(function () {\n    setOpen(-1);\n  });\n  useEnhancedEffect(function () {\n    if (disabled && sliderRef.current.contains(document.activeElement)) {\n      // This is necessary because Firefox and Safari will keep focus\n      // on a disabled element:\n      // https://codesandbox.io/s/mui-pr-22247-forked-h151h?file=/src/App.js\n      document.activeElement.blur();\n    }\n  }, [disabled]);\n  if (disabled && active !== -1) {\n    setActive(-1);\n  }\n  if (disabled && focusVisible !== -1) {\n    setFocusVisible(-1);\n  }\n  var handleHiddenInputChange = useEventCallback(function (event) {\n    var index = Number(event.currentTarget.getAttribute('data-index'));\n    var value = values[index];\n    var marksValues = marks.map(function (mark) {\n      return mark.value;\n    });\n    var marksIndex = marksValues.indexOf(value);\n    var newValue = event.target.valueAsNumber;\n    if (marks && step == null) {\n      newValue = newValue < value ? marksValues[marksIndex - 1] : marksValues[marksIndex + 1];\n    }\n    newValue = clamp(newValue, min, max);\n    if (marks && step == null) {\n      var markValues = marks.map(function (mark) {\n        return mark.value;\n      });\n      var currentMarkIndex = markValues.indexOf(values[index]);\n      newValue = newValue < values[index] ? markValues[currentMarkIndex - 1] : markValues[currentMarkIndex + 1];\n    }\n    if (range) {\n      // Bound the new value to the thumb's neighbours.\n      if (disableSwap) {\n        newValue = clamp(newValue, values[index - 1] || -Infinity, values[index + 1] || Infinity);\n      }\n      var previousValue = newValue;\n      newValue = setValueIndex({\n        values: values,\n        source: valueDerived,\n        newValue: newValue,\n        index: index\n      }).sort(asc);\n      var activeIndex = index; // Potentially swap the index if needed.\n\n      if (!disableSwap) {\n        activeIndex = newValue.indexOf(previousValue);\n      }\n      focusThumb({\n        sliderRef: sliderRef,\n        activeIndex: activeIndex\n      });\n    }\n    setValueState(newValue);\n    setFocusVisible(index);\n    if (handleChange) {\n      handleChange(event, newValue, index);\n    }\n    if (onChangeCommitted) {\n      onChangeCommitted(event, newValue);\n    }\n  });\n  var previousIndex = React.useRef();\n  var axis = orientation;\n  if (isRtl && orientation !== \"vertical\") {\n    axis += '-reverse';\n  }\n  var getFingerNewValue = function getFingerNewValue(_ref4) {\n    var finger = _ref4.finger,\n      _ref4$move = _ref4.move,\n      move = _ref4$move === void 0 ? false : _ref4$move,\n      values2 = _ref4.values,\n      source = _ref4.source;\n    var slider = sliderRef.current;\n    var _slider$getBoundingCl = slider.getBoundingClientRect(),\n      width = _slider$getBoundingCl.width,\n      height = _slider$getBoundingCl.height,\n      bottom = _slider$getBoundingCl.bottom,\n      left = _slider$getBoundingCl.left;\n    var percent;\n    if (axis.indexOf('vertical') === 0) {\n      percent = (bottom - finger.y) / height;\n    } else {\n      percent = (finger.x - left) / width;\n    }\n    if (axis.indexOf('-reverse') !== -1) {\n      percent = 1 - percent;\n    }\n    var newValue;\n    newValue = percentToValue(percent, min, max);\n    if (step) {\n      newValue = roundValueToStep(newValue, step, min);\n    } else {\n      var marksValues = marks.map(function (mark) {\n        return mark.value;\n      });\n      var closestIndex = findClosest(marksValues, newValue);\n      newValue = marksValues[closestIndex];\n    }\n    newValue = clamp(newValue, min, max);\n    var activeIndex = 0;\n    if (range) {\n      if (!move) {\n        activeIndex = findClosest(values2, newValue);\n      } else {\n        activeIndex = previousIndex.current;\n      } // Bound the new value to the thumb's neighbours.\n\n      if (disableSwap) {\n        newValue = clamp(newValue, values2[activeIndex - 1] || -Infinity, values2[activeIndex + 1] || Infinity);\n      }\n      var previousValue = newValue;\n      newValue = setValueIndex({\n        values: values2,\n        source: source,\n        newValue: newValue,\n        index: activeIndex\n      }).sort(asc); // Potentially swap the index if needed.\n\n      if (!(disableSwap && move)) {\n        activeIndex = newValue.indexOf(previousValue);\n        previousIndex.current = activeIndex;\n      }\n    }\n    return {\n      newValue: newValue,\n      activeIndex: activeIndex\n    };\n  };\n  var handleTouchMove = useEventCallback(function (nativeEvent) {\n    var finger = trackFinger(nativeEvent, touchId);\n    if (!finger) {\n      return;\n    }\n    moveCount.current += 1; // Cancel move in case some other element consumed a mouseup event and it was not fired.\n\n    if (nativeEvent.type === 'mousemove' && nativeEvent.buttons === 0) {\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      handleTouchEnd(nativeEvent);\n      return;\n    }\n    var _getFingerNewValue = getFingerNewValue({\n        finger: finger,\n        move: true,\n        values: values,\n        source: valueDerived\n      }),\n      newValue = _getFingerNewValue.newValue,\n      activeIndex = _getFingerNewValue.activeIndex;\n    focusThumb({\n      sliderRef: sliderRef,\n      activeIndex: activeIndex,\n      setActive: setActive\n    });\n    setValueState(newValue);\n    if (!dragging && moveCount.current > INTENTIONAL_DRAG_COUNT_THRESHOLD) {\n      setDragging(true);\n    }\n    if (handleChange) {\n      handleChange(nativeEvent, newValue, activeIndex);\n    }\n  });\n  var handleTouchEnd = useEventCallback(function (nativeEvent) {\n    var finger = trackFinger(nativeEvent, touchId);\n    setDragging(false);\n    if (!finger) {\n      return;\n    }\n    var _getFingerNewValue2 = getFingerNewValue({\n        finger: finger,\n        values: values,\n        source: valueDerived\n      }),\n      newValue = _getFingerNewValue2.newValue;\n    setActive(-1);\n    if (nativeEvent.type === 'touchend') {\n      setOpen(-1);\n    }\n    if (onChangeCommitted) {\n      onChangeCommitted(nativeEvent, newValue);\n    }\n    touchId.current = undefined; // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n    stopListening();\n  });\n  var handleTouchStart = useEventCallback(function (nativeEvent) {\n    // If touch-action: none; is not supported we need to prevent the scroll manually.\n    if (!doesSupportTouchActionNone()) {\n      nativeEvent.preventDefault();\n    }\n    var touch = nativeEvent.changedTouches[0];\n    if (touch != null) {\n      // A number that uniquely identifies the current finger in the touch session.\n      touchId.current = touch.identifier;\n    }\n    var finger = trackFinger(nativeEvent, touchId);\n    var _getFingerNewValue3 = getFingerNewValue({\n        finger: finger,\n        values: values,\n        source: valueDerived\n      }),\n      newValue = _getFingerNewValue3.newValue,\n      activeIndex = _getFingerNewValue3.activeIndex;\n    focusThumb({\n      sliderRef: sliderRef,\n      activeIndex: activeIndex,\n      setActive: setActive\n    });\n    setValueState(newValue);\n    if (handleChange) {\n      handleChange(nativeEvent, newValue, activeIndex);\n    }\n    moveCount.current = 0;\n    var doc = ownerDocument(sliderRef.current);\n    doc.addEventListener('touchmove', handleTouchMove);\n    doc.addEventListener('touchend', handleTouchEnd);\n  });\n  var stopListening = React.useCallback(function () {\n    var doc = ownerDocument(sliderRef.current);\n    doc.removeEventListener('mousemove', handleTouchMove);\n    doc.removeEventListener('mouseup', handleTouchEnd);\n    doc.removeEventListener('touchmove', handleTouchMove);\n    doc.removeEventListener('touchend', handleTouchEnd);\n  }, [handleTouchEnd, handleTouchMove]);\n  React.useEffect(function () {\n    var slider = sliderRef.current;\n    slider.addEventListener('touchstart', handleTouchStart, {\n      passive: doesSupportTouchActionNone()\n    });\n    return function () {\n      slider.removeEventListener('touchstart', handleTouchStart, {\n        passive: doesSupportTouchActionNone()\n      });\n      stopListening();\n    };\n  }, [stopListening, handleTouchStart]);\n  React.useEffect(function () {\n    if (disabled) {\n      stopListening();\n    }\n  }, [disabled, stopListening]);\n  var handleMouseDown = useEventCallback(function (event) {\n    if (onMouseDown) {\n      onMouseDown(event);\n    } // Only handle left clicks\n\n    if (event.button !== 0) {\n      return;\n    } // Avoid text selection\n\n    event.preventDefault();\n    var finger = trackFinger(event, touchId);\n    var _getFingerNewValue4 = getFingerNewValue({\n        finger: finger,\n        values: values,\n        source: valueDerived\n      }),\n      newValue = _getFingerNewValue4.newValue,\n      activeIndex = _getFingerNewValue4.activeIndex;\n    focusThumb({\n      sliderRef: sliderRef,\n      activeIndex: activeIndex,\n      setActive: setActive\n    });\n    setValueState(newValue);\n    if (handleChange) {\n      handleChange(event, newValue, activeIndex);\n    }\n    moveCount.current = 0;\n    var doc = ownerDocument(sliderRef.current);\n    doc.addEventListener('mousemove', handleTouchMove);\n    doc.addEventListener('mouseup', handleTouchEnd);\n  });\n  var trackOffset = valueToPercent(range ? values[0] : min, min, max);\n  var trackLeap = valueToPercent(values[values.length - 1], min, max) - trackOffset;\n  var trackStyle = _extends({}, axisProps[axis].offset(trackOffset), axisProps[axis].leap(trackLeap));\n  var Root = components.Root || component;\n  var rootProps = componentsProps.root || {};\n  var Rail = components.Rail || 'span';\n  var railProps = componentsProps.rail || {};\n  var Track = components.Track || 'span';\n  var trackProps = componentsProps.track || {};\n  var Thumb = components.Thumb || 'span';\n  var thumbProps = componentsProps.thumb || {};\n  var ValueLabel = components.ValueLabel || SliderValueLabelUnstyled;\n  var valueLabelProps = componentsProps.valueLabel || {};\n  var Mark = components.Mark || 'span';\n  var markProps = componentsProps.mark || {};\n  var MarkLabel = components.MarkLabel || 'span';\n  var markLabelProps = componentsProps.markLabel || {}; // all props with defaults\n  // consider extracting to hook an reusing the lint rule for the varints\n\n  var styleProps = _extends({}, props, {\n    classes: classesProp,\n    disabled: disabled,\n    dragging: dragging,\n    isRtl: isRtl,\n    marked: marks.length > 0 && marks.some(function (mark) {\n      return mark.label;\n    }),\n    max: max,\n    min: min,\n    orientation: orientation,\n    scale: scale,\n    step: step,\n    track: track,\n    valueLabelDisplay: valueLabelDisplay,\n    valueLabelFormat: valueLabelFormat\n  });\n  var classes = useUtilityClasses(styleProps);\n  return /*#__PURE__*/_jsxs(Root, _extends({\n    ref: handleRef,\n    onMouseDown: handleMouseDown\n  }, rootProps, !isHostComponent(Root) && {\n    as: component,\n    styleProps: _extends({}, styleProps, rootProps.styleProps)\n  }, other, {\n    className: clsx(classes.root, rootProps.className, className),\n    children: [/*#__PURE__*/_jsx(Rail, _extends({}, railProps, !isHostComponent(Rail) && {\n      styleProps: _extends({}, styleProps, railProps.styleProps)\n    }, {\n      className: clsx(classes.rail, railProps.className)\n    })), /*#__PURE__*/_jsx(Track, _extends({}, trackProps, !isHostComponent(Track) && {\n      styleProps: _extends({}, styleProps, trackProps.styleProps)\n    }, {\n      className: clsx(classes.track, trackProps.className),\n      style: _extends({}, trackStyle, trackProps.style)\n    })), marks.map(function (mark, index) {\n      var percent = valueToPercent(mark.value, min, max);\n      var style = axisProps[axis].offset(percent);\n      var markActive;\n      if (track === false) {\n        markActive = values.indexOf(mark.value) !== -1;\n      } else {\n        markActive = track === 'normal' && (range ? mark.value >= values[0] && mark.value <= values[values.length - 1] : mark.value <= values[0]) || track === 'inverted' && (range ? mark.value <= values[0] || mark.value >= values[values.length - 1] : mark.value >= values[0]);\n      }\n      return /*#__PURE__*/_jsxs(React.Fragment, {\n        children: [/*#__PURE__*/_jsx(Mark, _extends({\n          \"data-index\": index\n        }, markProps, !isHostComponent(Mark) && {\n          styleProps: _extends({}, styleProps, markProps.styleProps, {\n            markActive: markActive\n          })\n        }, {\n          style: _extends({}, style, markProps.style),\n          className: clsx(classes.mark, markProps.className, markActive && classes.markActive)\n        })), mark.label != null ? /*#__PURE__*/_jsx(MarkLabel, _extends({\n          \"aria-hidden\": true,\n          \"data-index\": index\n        }, markLabelProps, !isHostComponent(MarkLabel) && {\n          styleProps: _extends({}, styleProps, markLabelProps.styleProps, {\n            markLabelActive: markActive\n          })\n        }, {\n          style: _extends({}, style, markLabelProps.style),\n          className: clsx(classes.markLabel, markLabelProps.className, markActive && classes.markLabelActive),\n          children: mark.label\n        })) : null]\n      }, mark.value);\n    }), values.map(function (value, index) {\n      var percent = valueToPercent(value, min, max);\n      var style = axisProps[axis].offset(percent);\n      var ValueLabelComponent = valueLabelDisplay === 'off' ? Forward : ValueLabel;\n      return /*#__PURE__*/_jsx(React.Fragment, {\n        children: /*#__PURE__*/_jsx(ValueLabelComponent, _extends({\n          valueLabelFormat: valueLabelFormat,\n          valueLabelDisplay: valueLabelDisplay,\n          value: typeof valueLabelFormat === 'function' ? valueLabelFormat(scale(value), index) : valueLabelFormat,\n          index: index,\n          open: open === index || active === index || valueLabelDisplay === 'on',\n          disabled: disabled\n        }, valueLabelProps, {\n          className: clsx(classes.valueLabel, valueLabelProps.className)\n        }, !isHostComponent(ValueLabel) && {\n          styleProps: _extends({}, styleProps, valueLabelProps.styleProps)\n        }, {\n          children: /*#__PURE__*/_jsx(Thumb, _extends({\n            \"data-index\": index,\n            onMouseOver: handleMouseOver,\n            onMouseLeave: handleMouseLeave\n          }, thumbProps, {\n            className: clsx(classes.thumb, thumbProps.className, active === index && classes.active, focusVisible === index && classes.focusVisible)\n          }, !isHostComponent(Thumb) && {\n            styleProps: _extends({}, styleProps, thumbProps.styleProps)\n          }, {\n            style: _extends({}, style, {\n              pointerEvents: disableSwap && active !== index ? 'none' : undefined\n            }, thumbProps.style),\n            children: /*#__PURE__*/_jsx(\"input\", {\n              tabIndex: tabIndex,\n              \"data-index\": index,\n              \"aria-label\": getAriaLabel ? getAriaLabel(index) : ariaLabel,\n              \"aria-labelledby\": ariaLabelledby,\n              \"aria-orientation\": orientation,\n              \"aria-valuemax\": scale(max),\n              \"aria-valuemin\": scale(min),\n              \"aria-valuenow\": scale(value),\n              \"aria-valuetext\": getAriaValueText ? getAriaValueText(scale(value), index) : ariaValuetext,\n              onFocus: handleFocus,\n              onBlur: handleBlur,\n              name: name,\n              type: \"range\",\n              min: props.min,\n              max: props.max,\n              step: props.step,\n              disabled: disabled,\n              value: values[index],\n              onChange: handleHiddenInputChange,\n              style: _extends({}, visuallyHidden, {\n                direction: isRtl ? 'rtl' : 'ltr',\n                // So that VoiceOver's focus indicator matches the thumb's dimensions\n                width: '100%',\n                height: '100%'\n              })\n            })\n          }))\n        }))\n      }, index);\n    })]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? SliderUnstyled.propTypes\n/* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The label of the slider.\n   */\n  'aria-label': chainPropTypes(PropTypes.string, function (props) {\n    var range = Array.isArray(props.value || props.defaultValue);\n    if (range && props['aria-label'] != null) {\n      return new Error('Material-UI: You need to use the `getAriaLabel` prop instead of `aria-label` when using a range slider.');\n    }\n    return null;\n  }),\n  /**\n   * The id of the element containing a label for the slider.\n   */\n  'aria-labelledby': PropTypes.string,\n  /**\n   * A string value that provides a user-friendly name for the current value of the slider.\n   */\n  'aria-valuetext': chainPropTypes(PropTypes.string, function (props) {\n    var range = Array.isArray(props.value || props.defaultValue);\n    if (range && props['aria-valuetext'] != null) {\n      return new Error('Material-UI: You need to use the `getAriaValueText` prop instead of `aria-valuetext` when using a range slider.');\n    }\n    return null;\n  }),\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The components used for each slot inside the Slider.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.shape({\n    Mark: PropTypes.elementType,\n    MarkLabel: PropTypes.elementType,\n    Rail: PropTypes.elementType,\n    Root: PropTypes.elementType,\n    Thumb: PropTypes.elementType,\n    Track: PropTypes.elementType,\n    ValueLabel: PropTypes.elementType\n  }),\n  /**\n   * The props used for each slot inside the Slider.\n   * @default {}\n   */\n  componentsProps: PropTypes.object,\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number]),\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the active thumb doesn't swap when moving pointer over a thumb while dragging another thumb.\n   * @default false\n   */\n  disableSwap: PropTypes.bool,\n  /**\n   * Accepts a function which returns a string value that provides a user-friendly name for the thumb labels of the slider.\n   * This is important for screen reader users.\n   * @param {number} index The thumb label's index to format.\n   * @returns {string}\n   */\n  getAriaLabel: PropTypes.func,\n  /**\n   * Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider.\n   * This is important for screen reader users.\n   * @param {number} value The thumb label's value to format.\n   * @param {number} index The thumb label's index to format.\n   * @returns {string}\n   */\n  getAriaValueText: PropTypes.func,\n  /**\n   * Indicates whether the theme context has rtl direction. It is set automatically.\n   * @default false\n   */\n  isRtl: PropTypes.bool,\n  /**\n   * Marks indicate predetermined values to which the user can move the slider.\n   * If `true` the marks are spaced according the value of the `step` prop.\n   * If an array, it should contain objects with `value` and an optional `label` keys.\n   * @default false\n   */\n  marks: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.node,\n    value: PropTypes.number.isRequired\n  })), PropTypes.bool]),\n  /**\n   * The maximum allowed value of the slider.\n   * Should not be equal to min.\n   * @default 100\n   */\n  max: PropTypes.number,\n  /**\n   * The minimum allowed value of the slider.\n   * Should not be equal to max.\n   * @default 0\n   */\n  min: PropTypes.number,\n  /**\n   * Name attribute of the hidden `input` element.\n   */\n  name: PropTypes.string,\n  /**\n   * Callback function that is fired when the slider's value changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (any).\n   * **Warning**: This is a generic event not a change event.\n   * @param {number | number[]} value The new value.\n   * @param {number} activeThumb Index of the currently moved thumb.\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback function that is fired when the `mouseup` is triggered.\n   *\n   * @param {object} event The event source of the callback. **Warning**: This is a generic event not a change event.\n   * @param {number | number[]} value The new value.\n   */\n  onChangeCommitted: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onMouseDown: PropTypes.func,\n  /**\n   * The component orientation.\n   * @default 'horizontal'\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n  /**\n   * A transformation function, to change the scale of the slider.\n   * @default (x) => x\n   */\n  scale: PropTypes.func,\n  /**\n   * The granularity with which the slider can step through values. (A \"discrete\" slider.)\n   * The `min` prop serves as the origin for the valid values.\n   * We recommend (max - min) to be evenly divisible by the step.\n   *\n   * When step is `null`, the thumb can only be slid onto marks provided with the `marks` prop.\n   * @default 1\n   */\n  step: PropTypes.number,\n  /**\n   * Tab index attribute of the hidden `input` element.\n   */\n  tabIndex: PropTypes.number,\n  /**\n   * The track presentation:\n   *\n   * - `normal` the track will render a bar representing the slider value.\n   * - `inverted` the track will render a bar representing the remaining slider value.\n   * - `false` the track will render without a bar.\n   * @default 'normal'\n   */\n  track: PropTypes.oneOf(['inverted', 'normal', false]),\n  /**\n   * The value of the slider.\n   * For ranged sliders, provide an array with two values.\n   */\n  value: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number]),\n  /**\n   * Controls when the value label is displayed:\n   *\n   * - `auto` the value label will display when the thumb is hovered or focused.\n   * - `on` will display persistently.\n   * - `off` will never display.\n   * @default 'off'\n   */\n  valueLabelDisplay: PropTypes.oneOf(['auto', 'off', 'on']),\n  /**\n   * The format function the value label's value.\n   *\n   * When a function is provided, it should have the following signature:\n   *\n   * - {number} value The value label's value to format\n   * - {number} index The value label's index to format\n   * @default (x) => x\n   */\n  valueLabelFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string])\n} : void 0;\nexport default SliderUnstyled;","map":null,"metadata":{},"sourceType":"module"}