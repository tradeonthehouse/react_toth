{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"allowSameDateSelection\", \"autoFocus\", \"className\", \"day\", \"disabled\", \"disableHighlightToday\", \"disableMargin\", \"hidden\", \"isAnimating\", \"onClick\", \"onDayFocus\", \"onDaySelect\", \"onFocus\", \"onKeyDown\", \"outsideCurrentMonth\", \"selected\", \"showDaysOutsideCurrentMonth\", \"today\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport ButtonBase from '@material-ui/core/ButtonBase';\nimport { unstable_useEnhancedEffect as useEnhancedEffect } from '@material-ui/utils';\nimport { unstable_composeClasses as composeClasses, generateUtilityClass, generateUtilityClasses } from '@material-ui/unstyled';\nimport { useTheme, alpha, styled, useThemeProps } from '@material-ui/core/styles';\nimport { useForkRef } from '@material-ui/core/utils';\nimport { useUtils } from '../internal/pickers/hooks/useUtils';\nimport { DAY_SIZE, DAY_MARGIN } from '../internal/pickers/constants/dimensions';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function getPickersDayUtilityClass(slot) {\n  return generateUtilityClass('MuiPickersDay', slot);\n}\nexport const pickersDayClasses = generateUtilityClasses('MuiPickersDay', ['root', 'dayWithMargin', 'dayOutsideMonth', 'hiddenDaySpacingFiller', 'today', 'selected', 'disabled']);\nconst useUtilityClasses = styleProps => {\n  const {\n    selected,\n    disableMargin,\n    disableHighlightToday,\n    today,\n    outsideCurrentMonth,\n    showDaysOutsideCurrentMonth,\n    classes\n  } = styleProps;\n  const slots = {\n    root: ['root', selected && 'selected', !disableMargin && 'dayWithMargin', !disableHighlightToday && today && 'today', outsideCurrentMonth && showDaysOutsideCurrentMonth && 'dayOutsideMonth'],\n    hiddenDaySpacingFiller: ['hiddenDaySpacingFiller']\n  };\n  return composeClasses(slots, getPickersDayUtilityClass, classes);\n};\nconst styleArg = _ref => {\n  let {\n    theme,\n    styleProps\n  } = _ref;\n  return _extends({}, theme.typography.caption, {\n    width: DAY_SIZE,\n    height: DAY_SIZE,\n    borderRadius: '50%',\n    padding: 0,\n    // background required here to prevent collides with the other days when animating with transition group\n    backgroundColor: theme.palette.background.paper,\n    color: theme.palette.text.primary,\n    '&:hover': {\n      backgroundColor: alpha(theme.palette.action.active, theme.palette.action.hoverOpacity)\n    },\n    '&:focus': {\n      backgroundColor: alpha(theme.palette.action.active, theme.palette.action.hoverOpacity),\n      [`&.${pickersDayClasses.selected}`]: {\n        willChange: 'background-color',\n        backgroundColor: theme.palette.primary.dark\n      }\n    },\n    [`&.${pickersDayClasses.selected}`]: {\n      color: theme.palette.primary.contrastText,\n      backgroundColor: theme.palette.primary.main,\n      fontWeight: theme.typography.fontWeightMedium,\n      transition: theme.transitions.create('background-color', {\n        duration: theme.transitions.duration.short\n      }),\n      '&:hover': {\n        willChange: 'background-color',\n        backgroundColor: theme.palette.primary.dark\n      }\n    },\n    [`&.${pickersDayClasses.disabled}`]: {\n      color: theme.palette.text.secondary\n    }\n  }, !styleProps.disableMargin && {\n    margin: `0 ${DAY_MARGIN}px`\n  }, styleProps.outsideCurrentMonth && styleProps.showDaysOutsideCurrentMonth && {\n    color: theme.palette.text.secondary\n  }, !styleProps.disableHighlightToday && styleProps.today && {\n    [`&:not(.${pickersDayClasses.selected})`]: {\n      border: `1px solid ${theme.palette.text.secondary}`\n    }\n  });\n};\nconst overridesResolver = (props, styles) => {\n  const {\n    styleProps\n  } = props;\n  return [styles.root, !styleProps.disableMargin && styles.dayWithMargin, !styleProps.disableHighlightToday && styleProps.today && styles.today, !styleProps.outsideCurrentMonth && styleProps.showDaysOutsideCurrentMonth && styles.dayOutsideMonth, styleProps.outsideCurrentMonth && !styleProps.showDaysOutsideCurrentMonth && styles.hiddenDaySpacingFiller];\n};\nconst PickersDayRoot = styled(ButtonBase, {\n  name: 'MuiPickersDay',\n  slot: 'Root',\n  overridesResolver\n})(styleArg);\nconst PickersDayFiller = styled('div', {\n  name: 'MuiPickersDay',\n  slot: 'Root',\n  overridesResolver\n})(_ref2 => {\n  let {\n    theme,\n    styleProps\n  } = _ref2;\n  return _extends({}, styleArg({\n    theme,\n    styleProps\n  }), {\n    visibility: 'hidden'\n  });\n});\nconst noop = () => {};\nconst PickersDay = /*#__PURE__*/React.forwardRef(function PickersDay(inProps, forwardedRef) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiPickersDay'\n  });\n  const {\n      allowSameDateSelection = false,\n      autoFocus = false,\n      className,\n      day,\n      disabled = false,\n      disableHighlightToday = false,\n      disableMargin = false,\n      isAnimating,\n      onClick,\n      onDayFocus = noop,\n      onDaySelect,\n      onFocus,\n      onKeyDown,\n      outsideCurrentMonth,\n      selected = false,\n      showDaysOutsideCurrentMonth = false,\n      today: isToday = false\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const styleProps = _extends({}, props, {\n    allowSameDateSelection,\n    autoFocus,\n    disabled,\n    disableHighlightToday,\n    disableMargin,\n    selected,\n    showDaysOutsideCurrentMonth,\n    today: isToday\n  });\n  const classes = useUtilityClasses(styleProps);\n  const utils = useUtils();\n  const ref = React.useRef(null);\n  const handleRef = useForkRef(ref, forwardedRef); // Since this is rendered when a Popper is opened we can't use passive effects.\n  // Focusing in passive effects in Popper causes scroll jump.\n\n  useEnhancedEffect(() => {\n    if (autoFocus && !disabled && !isAnimating && !outsideCurrentMonth) {\n      // ref.current being null would be a bug in Material-UI\n      ref.current.focus();\n    }\n  }, [autoFocus, disabled, isAnimating, outsideCurrentMonth]);\n  const handleFocus = event => {\n    if (onDayFocus) {\n      onDayFocus(day);\n    }\n    if (onFocus) {\n      onFocus(event);\n    }\n  };\n  const handleClick = event => {\n    if (!allowSameDateSelection && selected) return;\n    if (!disabled) {\n      onDaySelect(day, 'finish');\n    }\n    if (onClick) {\n      onClick(event);\n    }\n  };\n  const theme = useTheme();\n  function handleKeyDown(event) {\n    if (onKeyDown !== undefined) {\n      onKeyDown(event);\n    }\n    switch (event.key) {\n      case 'ArrowUp':\n        onDayFocus(utils.addDays(day, -7));\n        event.preventDefault();\n        break;\n      case 'ArrowDown':\n        onDayFocus(utils.addDays(day, 7));\n        event.preventDefault();\n        break;\n      case 'ArrowLeft':\n        onDayFocus(utils.addDays(day, theme.direction === 'ltr' ? -1 : 1));\n        event.preventDefault();\n        break;\n      case 'ArrowRight':\n        onDayFocus(utils.addDays(day, theme.direction === 'ltr' ? 1 : -1));\n        event.preventDefault();\n        break;\n      case 'Home':\n        onDayFocus(utils.startOfWeek(day));\n        event.preventDefault();\n        break;\n      case 'End':\n        onDayFocus(utils.endOfWeek(day));\n        event.preventDefault();\n        break;\n      case 'PageUp':\n        onDayFocus(utils.getNextMonth(day));\n        event.preventDefault();\n        break;\n      case 'PageDown':\n        onDayFocus(utils.getPreviousMonth(day));\n        event.preventDefault();\n        break;\n      default:\n        break;\n    }\n  }\n  if (outsideCurrentMonth && !showDaysOutsideCurrentMonth) {\n    return /*#__PURE__*/_jsx(PickersDayFiller, {\n      className: clsx(classes.root, classes.hiddenDaySpacingFiller, className),\n      styleProps: styleProps\n    });\n  }\n  return /*#__PURE__*/_jsx(PickersDayRoot, _extends({\n    className: clsx(classes.root, className),\n    styleProps: styleProps,\n    ref: handleRef,\n    centerRipple: true,\n    disabled: disabled,\n    \"aria-label\": utils.format(day, 'fullDate'),\n    tabIndex: selected ? 0 : -1,\n    onFocus: handleFocus,\n    onKeyDown: handleKeyDown,\n    onClick: handleClick\n  }, other, {\n    children: utils.format(day, 'dayOfMonth')\n  }));\n});\nexport const areDayPropsEqual = (prevProps, nextProps) => {\n  return prevProps.autoFocus === nextProps.autoFocus && prevProps.isAnimating === nextProps.isAnimating && prevProps.today === nextProps.today && prevProps.disabled === nextProps.disabled && prevProps.selected === nextProps.selected && prevProps.disableMargin === nextProps.disableMargin && prevProps.showDaysOutsideCurrentMonth === nextProps.showDaysOutsideCurrentMonth && prevProps.disableHighlightToday === nextProps.disableHighlightToday && prevProps.className === nextProps.className && prevProps.outsideCurrentMonth === nextProps.outsideCurrentMonth && prevProps.onDayFocus === nextProps.onDayFocus && prevProps.onDaySelect === nextProps.onDaySelect;\n};\nprocess.env.NODE_ENV !== \"production\" ? PickersDay.propTypes\n/* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\r\n   * If `true`, `onChange` is fired on click even if the same date is selected.\r\n   * @default false\r\n   */\n  allowSameDateSelection: PropTypes.bool,\n  /**\r\n   * @ignore\r\n   */\n  autoFocus: PropTypes.bool,\n  /**\r\n   * The content of the component.\r\n   */\n  children: PropTypes.node,\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   */\n  classes: PropTypes.object,\n  /**\r\n   * @ignore\r\n   */\n  className: PropTypes.string,\n  /**\r\n   * The date to show.\r\n   */\n  day: PropTypes.any.isRequired,\n  /**\r\n   * If `true`, renders as disabled.\r\n   * @default false\r\n   */\n  disabled: PropTypes.bool,\n  /**\r\n   * If `true`, todays date is rendering without highlighting with circle.\r\n   * @default false\r\n   */\n  disableHighlightToday: PropTypes.bool,\n  /**\r\n   * If `true`, days are rendering without margin. Useful for displaying linked range of days.\r\n   * @default false\r\n   */\n  disableMargin: PropTypes.bool,\n  /**\r\n   * @ignore\r\n   */\n  hidden: PropTypes.bool,\n  /**\r\n   * @ignore\r\n   */\n  isAnimating: PropTypes.bool,\n  /**\r\n   * @ignore\r\n   */\n  onClick: PropTypes.func,\n  /**\r\n   * @ignore\r\n   */\n  onDayFocus: PropTypes.func,\n  /**\r\n   * @ignore\r\n   */\n  onDaySelect: PropTypes.func.isRequired,\n  /**\r\n   * @ignore\r\n   */\n  onFocus: PropTypes.func,\n  /**\r\n   * @ignore\r\n   */\n  onKeyDown: PropTypes.func,\n  /**\r\n   * If `true`, day is outside of month and will be hidden.\r\n   */\n  outsideCurrentMonth: PropTypes.bool.isRequired,\n  /**\r\n   * If `true`, renders as selected.\r\n   * @default false\r\n   */\n  selected: PropTypes.bool,\n  /**\r\n   * If `true`, days that have `outsideCurrentMonth={true}` are displayed.\r\n   * @default false\r\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n  /**\r\n   * The system prop that allows defining system overrides as well as additional CSS styles.\r\n   */\n  sx: PropTypes.object,\n  /**\r\n   * If `true`, renders as today date.\r\n   * @default false\r\n   */\n  today: PropTypes.bool\n} : void 0;\n/**\r\n *\r\n * Demos:\r\n *\r\n * - [Date Picker](https://material-ui.com/components/date-picker/)\r\n *\r\n * API:\r\n *\r\n * - [PickersDay API](https://material-ui.com/api/pickers-day/)\r\n */\n\nexport default /*#__PURE__*/React.memo(PickersDay, areDayPropsEqual);","map":null,"metadata":{},"sourceType":"module"}