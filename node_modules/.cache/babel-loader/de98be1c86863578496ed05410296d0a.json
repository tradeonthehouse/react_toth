{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"ampm\", \"ampmInClock\", \"date\", \"isLandscape\", \"isMobileKeyboardViewOpen\", \"onChange\", \"openView\", \"setOpenView\", \"toggleMobileKeyboardView\", \"toolbarTitle\", \"views\"];\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport { useTheme, styled } from '@material-ui/core/styles';\nimport { unstable_composeClasses as composeClasses, generateUtilityClass, generateUtilityClasses } from '@material-ui/unstyled';\nimport PickersToolbarText from '../internal/pickers/PickersToolbarText';\nimport PickersToolbarButton from '../internal/pickers/PickersToolbarButton';\nimport PickersToolbar from '../internal/pickers/PickersToolbar';\nimport { arrayIncludes } from '../internal/pickers/utils';\nimport { useUtils } from '../internal/pickers/hooks/useUtils';\nimport { useMeridiemMode } from '../internal/pickers/hooks/date-helpers-hooks';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function getTimePickerToolbarUtilityClass(slot) {\n  return generateUtilityClass('PrivateTimePickerToolbar', slot);\n}\nexport const timePickerToolbarClasses = generateUtilityClasses('PrivateTimePickerToolbar', ['separator', 'hourMinuteLabel', 'hourMinuteLabelLandscape', 'hourMinuteLabelReverse', 'ampmSelection', 'ampmLandscape', 'ampmLabel', 'penIconLandscape']);\nconst useUtilityClasses = styleProps => {\n  const {\n    theme,\n    isLandscape,\n    classes\n  } = styleProps;\n  const slots = {\n    penIconLandscape: ['penIconLandscape'],\n    separator: ['separator'],\n    hourMinuteLabel: ['hourMinuteLabel', isLandscape && 'hourMinuteLabelLandscape', theme.direction === 'rtl' && 'hourMinuteLabelReverse'],\n    ampmSelection: ['ampmSelection', isLandscape && 'ampmLandscape'],\n    ampmLabel: ['ampmLabel']\n  };\n  return composeClasses(slots, getTimePickerToolbarUtilityClass, classes);\n};\nconst TimePickerToolbarRoot = styled(PickersToolbar, {\n  skipSx: true\n})({\n  [`& .${timePickerToolbarClasses.penIconLandscape}`]: {\n    marginTop: 'auto'\n  }\n});\nconst TimePickerToolbarSeparator = styled(PickersToolbarText, {\n  skipSx: true\n})({\n  outline: 0,\n  margin: '0 4px 0 2px',\n  cursor: 'default'\n});\nconst TimePickerToolbarHourMinuteLabel = styled('div', {\n  skipSx: true\n})(_ref => {\n  let {\n    theme,\n    styleProps\n  } = _ref;\n  return _extends({\n    display: 'flex',\n    justifyContent: 'flex-end',\n    alignItems: 'flex-end'\n  }, styleProps.isLandscape && {\n    marginTop: 'auto'\n  }, theme.direction === 'rtl' && {\n    flexDirection: 'row-reverse'\n  });\n});\nconst TimePickerToolbarAmPmSelection = styled('div', {\n  skipSx: true\n})(_ref2 => {\n  let {\n    styleProps\n  } = _ref2;\n  return _extends({\n    display: 'flex',\n    flexDirection: 'column',\n    marginRight: 'auto',\n    marginLeft: 12\n  }, styleProps.isLandscape && {\n    margin: '4px 0 auto',\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    flexBasis: '100%'\n  }, {\n    [`& .${timePickerToolbarClasses.ampmLabel}`]: {\n      fontSize: 17\n    }\n  });\n});\n/**\r\n * @ignore - internal component.\r\n */\n\nconst TimePickerToolbar = props => {\n  const {\n      ampm,\n      ampmInClock,\n      date,\n      isLandscape,\n      isMobileKeyboardViewOpen,\n      onChange,\n      openView,\n      setOpenView,\n      toggleMobileKeyboardView,\n      toolbarTitle = 'SELECT TIME',\n      views\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const utils = useUtils();\n  const theme = useTheme();\n  const showAmPmControl = Boolean(ampm && !ampmInClock);\n  const {\n    meridiemMode,\n    handleMeridiemChange\n  } = useMeridiemMode(date, ampm, onChange);\n  const formatHours = time => ampm ? utils.format(time, 'hours12h') : utils.format(time, 'hours24h');\n  const styleProps = props;\n  const classes = useUtilityClasses(_extends({}, styleProps, {\n    theme\n  }));\n  const separator = /*#__PURE__*/_jsx(TimePickerToolbarSeparator, {\n    tabIndex: -1,\n    value: \":\",\n    variant: \"h3\",\n    selected: false,\n    className: classes.separator\n  });\n  return /*#__PURE__*/_jsxs(TimePickerToolbarRoot, _extends({\n    viewType: \"clock\",\n    landscapeDirection: \"row\",\n    toolbarTitle: toolbarTitle,\n    isLandscape: isLandscape,\n    isMobileKeyboardViewOpen: isMobileKeyboardViewOpen,\n    toggleMobileKeyboardView: toggleMobileKeyboardView,\n    styleProps: styleProps,\n    penIconClassName: clsx(isLandscape && classes.penIconLandscape)\n  }, other, {\n    children: [/*#__PURE__*/_jsxs(TimePickerToolbarHourMinuteLabel, {\n      className: classes.hourMinuteLabel,\n      styleProps: styleProps,\n      children: [arrayIncludes(views, 'hours') && /*#__PURE__*/_jsx(PickersToolbarButton, {\n        tabIndex: -1,\n        variant: \"h3\",\n        onClick: () => setOpenView('hours'),\n        selected: openView === 'hours',\n        value: date ? formatHours(date) : '--'\n      }), arrayIncludes(views, ['hours', 'minutes']) && separator, arrayIncludes(views, 'minutes') && /*#__PURE__*/_jsx(PickersToolbarButton, {\n        tabIndex: -1,\n        variant: \"h3\",\n        onClick: () => setOpenView('minutes'),\n        selected: openView === 'minutes',\n        value: date ? utils.format(date, 'minutes') : '--'\n      }), arrayIncludes(views, ['minutes', 'seconds']) && separator, arrayIncludes(views, 'seconds') && /*#__PURE__*/_jsx(PickersToolbarButton, {\n        variant: \"h3\",\n        onClick: () => setOpenView('seconds'),\n        selected: openView === 'seconds',\n        value: date ? utils.format(date, 'seconds') : '--'\n      })]\n    }), showAmPmControl && /*#__PURE__*/_jsxs(TimePickerToolbarAmPmSelection, {\n      className: classes.ampmSelection,\n      styleProps: styleProps,\n      children: [/*#__PURE__*/_jsx(PickersToolbarButton, {\n        disableRipple: true,\n        variant: \"subtitle2\",\n        selected: meridiemMode === 'am',\n        typographyClassName: classes.ampmLabel,\n        value: utils.getMeridiemText('am'),\n        onClick: () => handleMeridiemChange('am')\n      }), /*#__PURE__*/_jsx(PickersToolbarButton, {\n        disableRipple: true,\n        variant: \"subtitle2\",\n        selected: meridiemMode === 'pm',\n        typographyClassName: classes.ampmLabel,\n        value: utils.getMeridiemText('pm'),\n        onClick: () => handleMeridiemChange('pm')\n      })]\n    })]\n  }));\n};\nexport default TimePickerToolbar;","map":null,"metadata":{},"sourceType":"module"}