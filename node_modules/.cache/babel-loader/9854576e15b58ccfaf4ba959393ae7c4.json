{"ast":null,"code":"import { __extends, __assign } from 'tslib';\nimport * as React from 'react';\nimport { Presence } from './types.js';\nimport { layoutStack } from './utils/stack.js';\nimport { SharedLayoutContext } from '../../context/SharedLayoutContext.js';\nimport { MotionContext } from '../../context/MotionContext/index.js';\nimport { resetRotate } from './utils/rotate.js';\nimport { createBatcher } from './utils/batcher.js';\nimport { snapshotViewportBox } from '../../render/dom/projection/utils.js';\n\n/**\r\n * @public\r\n */\nvar AnimateSharedLayout = /** @class */function (_super) {\n  __extends(AnimateSharedLayout, _super);\n  function AnimateSharedLayout() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\r\n     * A list of all the children in the shared layout\r\n     */\n    _this.children = new Set();\n    /**\r\n     * As animate components with a defined `layoutId` are added/removed to the tree,\r\n     * we store them in order. When one is added, it will animate out from the\r\n     * previous one, and when it's removed, it'll animate to the previous one.\r\n     */\n    _this.stacks = new Map();\n    /**\r\n     * Track whether the component has mounted. If it hasn't, the presence of added children\r\n     * are set to Present, whereas if it has they're considered Entering\r\n     */\n    _this.hasMounted = false;\n    /**\r\n     * Track whether we already have an update scheduled. If we don't, we'll run snapshots\r\n     * and schedule one.\r\n     */\n    _this.updateScheduled = false;\n    /**\r\n     * Tracks whether we already have a render scheduled. If we don't, we'll force one with this.forceRender\r\n     */\n    _this.renderScheduled = false;\n    /**\r\n     * The methods provided to all children in the shared layout tree.\r\n     */\n    _this.syncContext = __assign(__assign({}, createBatcher()), {\n      syncUpdate: function (force) {\n        return _this.scheduleUpdate(force);\n      },\n      forceUpdate: function () {\n        // By copying syncContext to itself, when this component re-renders it'll also re-render\n        // all children subscribed to the SharedLayout context.\n        _this.syncContext = __assign({}, _this.syncContext);\n        _this.scheduleUpdate(true);\n      },\n      register: function (child) {\n        return _this.addChild(child);\n      },\n      remove: function (child) {\n        return _this.removeChild(child);\n      }\n    });\n    return _this;\n  }\n  AnimateSharedLayout.prototype.componentDidMount = function () {\n    this.hasMounted = true;\n  };\n  AnimateSharedLayout.prototype.componentDidUpdate = function () {\n    this.startLayoutAnimation();\n  };\n  AnimateSharedLayout.prototype.shouldComponentUpdate = function () {\n    this.renderScheduled = true;\n    return true;\n  };\n  AnimateSharedLayout.prototype.startLayoutAnimation = function () {\n    var _this = this;\n    /**\r\n     * Reset update and render scheduled status\r\n     */\n    this.renderScheduled = this.updateScheduled = false;\n    var type = this.props.type;\n    /**\r\n     * Update presence metadata based on the latest AnimatePresence status.\r\n     * This is a kind of goofy way of dealing with this, perhaps there's a better model to find.\r\n     */\n    this.children.forEach(function (child) {\n      if (!child.isPresent) {\n        child.presence = Presence.Exiting;\n      } else if (child.presence !== Presence.Entering) {\n        child.presence = child.presence === Presence.Exiting ? Presence.Entering : Presence.Present;\n      }\n    });\n    this.updateStacks();\n    /**\r\n     * Create a handler which we can use to flush the children animations\r\n     */\n    var handler = {\n      layoutReady: function (child) {\n        if (child.getLayoutId() !== undefined) {\n          var stack = _this.getStack(child);\n          stack.animate(child, type === \"crossfade\");\n        } else {\n          child.notifyLayoutReady();\n        }\n      },\n      parent: this.context.visualElement\n    };\n    /**\r\n     * Shared layout animations can be used without the AnimateSharedLayout wrapping component.\r\n     * This requires some co-ordination across components to stop layout thrashing\r\n     * and ensure measurements are taken at the correct time.\r\n     *\r\n     * Here we use that same mechanism of schedule/flush.\r\n     */\n    this.children.forEach(function (child) {\n      return _this.syncContext.add(child);\n    });\n    this.syncContext.flush(handler);\n    /**\r\n     * Clear snapshots so subsequent rerenders don't retain memory of outgoing components\r\n     */\n    this.stacks.forEach(function (stack) {\n      return stack.clearSnapshot();\n    });\n  };\n  AnimateSharedLayout.prototype.updateStacks = function () {\n    this.stacks.forEach(function (stack) {\n      return stack.updateLeadAndFollow();\n    });\n  };\n  AnimateSharedLayout.prototype.scheduleUpdate = function (force) {\n    if (force === void 0) {\n      force = false;\n    }\n    if (!(force || !this.updateScheduled)) return;\n    /**\r\n     * Flag we've scheduled an update\r\n     */\n    this.updateScheduled = true;\n    /**\r\n     * Write: Reset transforms so bounding boxes can be accurately measured.\r\n     */\n    this.children.forEach(function (child) {\n      resetRotate(child);\n      if (child.shouldResetTransform()) child.resetTransform();\n    });\n    /**\r\n     * Read: Snapshot children\r\n     */\n    this.children.forEach(snapshotViewportBox);\n    /**\r\n     * Every child keeps a local snapshot, but we also want to record\r\n     * snapshots of the visible children as, if they're are being removed\r\n     * in this render, we can still access them.\r\n     *\r\n     * TODO: What would be better here is doing a single loop where we\r\n     * only snapshotViewportBoxes of undefined layoutIds and then one for each stack\r\n     */\n    this.stacks.forEach(function (stack) {\n      return stack.updateSnapshot();\n    });\n    /**\r\n     * Force a rerender by setting state if we aren't already going to render.\r\n     */\n    if (force || !this.renderScheduled) {\n      this.renderScheduled = true;\n      this.forceUpdate();\n    }\n  };\n  AnimateSharedLayout.prototype.addChild = function (child) {\n    this.children.add(child);\n    this.addToStack(child);\n    child.presence = this.hasMounted ? Presence.Entering : Presence.Present;\n  };\n  AnimateSharedLayout.prototype.removeChild = function (child) {\n    this.scheduleUpdate();\n    this.children.delete(child);\n    this.removeFromStack(child);\n  };\n  AnimateSharedLayout.prototype.addToStack = function (child) {\n    var stack = this.getStack(child);\n    stack === null || stack === void 0 ? void 0 : stack.add(child);\n  };\n  AnimateSharedLayout.prototype.removeFromStack = function (child) {\n    var stack = this.getStack(child);\n    stack === null || stack === void 0 ? void 0 : stack.remove(child);\n  };\n  /**\r\n   * Return a stack of animate children based on the provided layoutId.\r\n   * Will create a stack if none currently exists with that layoutId.\r\n   */\n  AnimateSharedLayout.prototype.getStack = function (child) {\n    var id = child.getLayoutId();\n    if (id === undefined) return;\n    // Create stack if it doesn't already exist\n    !this.stacks.has(id) && this.stacks.set(id, layoutStack());\n    return this.stacks.get(id);\n  };\n  AnimateSharedLayout.prototype.render = function () {\n    return React.createElement(SharedLayoutContext.Provider, {\n      value: this.syncContext\n    }, this.props.children);\n  };\n  AnimateSharedLayout.contextType = MotionContext;\n  return AnimateSharedLayout;\n}(React.Component);\nexport { AnimateSharedLayout };","map":null,"metadata":{},"sourceType":"module"}