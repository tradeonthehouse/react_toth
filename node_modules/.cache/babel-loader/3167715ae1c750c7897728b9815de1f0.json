{"ast":null,"code":"import { __rest, __assign } from 'tslib';\nimport * as React from 'react';\nimport { useContext, useMemo } from 'react';\nimport { MotionConfigContext } from '../../context/MotionConfigContext.js';\nimport { useConstant } from '../../utils/use-constant.js';\n\n/**\r\n * `MotionConfig` is used to set configuration options for all children `motion` components.\r\n *\r\n * ```jsx\r\n * import { motion, MotionConfig } from \"framer-motion\"\r\n *\r\n * export function App() {\r\n *   return (\r\n *     <MotionConfig transition={{ type: \"spring\" }}>\r\n *       <motion.div animate={{ x: 100 }} />\r\n *     </MotionConfig>\r\n *   )\r\n * }\r\n * ```\r\n *\r\n * @public\r\n */\nfunction MotionConfig(_a) {\n  var children = _a.children,\n    config = __rest(_a, [\"children\"]);\n  /**\r\n   * Inherit props from any parent MotionConfig components\r\n   */\n  config = __assign(__assign({}, useContext(MotionConfigContext)), config);\n  /**\r\n   * Don't allow isStatic to change between renders as it affects how many hooks\r\n   * motion components fire.\r\n   */\n  config.isStatic = useConstant(function () {\n    return config.isStatic;\n  });\n  /**\r\n   * Creating a new config context object will re-render every `motion` component\r\n   * every time it renders. So we only want to create a new one sparingly.\r\n   */\n  var transitionDependency = typeof config.transition === \"object\" ? config.transition.toString() : \"\";\n  var context = useMemo(function () {\n    return config;\n  }, [transitionDependency, config.transformPagePoint]);\n  return React.createElement(MotionConfigContext.Provider, {\n    value: context\n  }, children);\n}\nexport { MotionConfig };","map":null,"metadata":{},"sourceType":"module"}