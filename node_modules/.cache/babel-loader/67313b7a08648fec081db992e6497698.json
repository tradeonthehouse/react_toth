{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"currentlySelectingRangeEnd\", \"disableOpenPicker\", \"endText\", \"onBlur\", \"onChange\", \"open\", \"openPicker\", \"rawValue\", \"rawValue\", \"readOnly\", \"renderInput\", \"setCurrentlySelectingRangeEnd\", \"startText\", \"TextFieldProps\", \"validationError\"];\nimport * as React from 'react';\nimport { styled } from '@material-ui/core/styles';\nimport { useUtils } from '../internal/pickers/hooks/useUtils';\nimport { useMaskedInput } from '../internal/pickers/hooks/useMaskedInput';\nimport { WrapperVariantContext } from '../internal/pickers/wrappers/WrapperVariantContext';\nimport { executeInTheNextEventLoopTick } from '../internal/pickers/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DateRangePickerInputRoot = styled('div', {\n  skipSx: true\n})(_ref => {\n  let {\n    theme\n  } = _ref;\n  return {\n    display: 'flex',\n    alignItems: 'baseline',\n    [theme.breakpoints.down('xs')]: {\n      flexDirection: 'column',\n      alignItems: 'center'\n    }\n  };\n});\n\n/**\r\n * @ignore - internal component.\r\n */\nconst DateRangePickerInput = /*#__PURE__*/React.forwardRef(function DateRangePickerInput(props, ref) {\n  const {\n      currentlySelectingRangeEnd,\n      disableOpenPicker,\n      endText,\n      onBlur,\n      onChange,\n      open,\n      openPicker,\n      rawValue: [start, end],\n      readOnly,\n      renderInput,\n      setCurrentlySelectingRangeEnd,\n      startText,\n      TextFieldProps,\n      validationError: [startValidationError, endValidationError]\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const utils = useUtils();\n  const startRef = React.useRef(null);\n  const endRef = React.useRef(null);\n  const wrapperVariant = React.useContext(WrapperVariantContext);\n  React.useEffect(() => {\n    if (!open) {\n      return;\n    }\n    if (currentlySelectingRangeEnd === 'start') {\n      var _startRef$current;\n      (_startRef$current = startRef.current) == null ? void 0 : _startRef$current.focus();\n    } else if (currentlySelectingRangeEnd === 'end') {\n      var _endRef$current;\n      (_endRef$current = endRef.current) == null ? void 0 : _endRef$current.focus();\n    }\n  }, [currentlySelectingRangeEnd, open]); // TODO: rethink this approach. We do not need to wait for calendar to be updated to rerender input (looks like freezing)\n  // TODO: so simply break 1 react's commit phase in 2 (first for input and second for calendars) by executing onChange in the next tick\n\n  const lazyHandleChangeCallback = React.useCallback(function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return executeInTheNextEventLoopTick(() => onChange(...args));\n  }, [onChange]);\n  const handleStartChange = (date, inputString) => {\n    lazyHandleChangeCallback([date, utils.date(end)], inputString);\n  };\n  const handleEndChange = (date, inputString) => {\n    lazyHandleChangeCallback([utils.date(start), date], inputString);\n  };\n  const openRangeStartSelection = () => {\n    if (setCurrentlySelectingRangeEnd) {\n      setCurrentlySelectingRangeEnd('start');\n    }\n    if (!readOnly && !disableOpenPicker) {\n      openPicker();\n    }\n  };\n  const openRangeEndSelection = () => {\n    if (setCurrentlySelectingRangeEnd) {\n      setCurrentlySelectingRangeEnd('end');\n    }\n    if (!readOnly && !disableOpenPicker) {\n      openPicker();\n    }\n  };\n  const openOnFocus = wrapperVariant === 'desktop';\n  const startInputProps = useMaskedInput(_extends({}, other, {\n    readOnly,\n    rawValue: start,\n    onChange: handleStartChange,\n    label: startText,\n    validationError: startValidationError !== null,\n    TextFieldProps: _extends({}, TextFieldProps, {\n      ref: startRef,\n      focused: open && currentlySelectingRangeEnd === 'start'\n    }),\n    inputProps: {\n      onClick: !openOnFocus ? openRangeStartSelection : undefined,\n      onFocus: openOnFocus ? openRangeStartSelection : undefined\n    }\n  }));\n  const endInputProps = useMaskedInput(_extends({}, other, {\n    readOnly,\n    label: endText,\n    rawValue: end,\n    onChange: handleEndChange,\n    validationError: endValidationError !== null,\n    TextFieldProps: _extends({}, TextFieldProps, {\n      ref: endRef,\n      focused: open && currentlySelectingRangeEnd === 'end'\n    }),\n    inputProps: {\n      onClick: !openOnFocus ? openRangeEndSelection : undefined,\n      onFocus: openOnFocus ? openRangeEndSelection : undefined\n    }\n  }));\n  return /*#__PURE__*/_jsx(DateRangePickerInputRoot, {\n    onBlur: onBlur,\n    ref: ref,\n    children: renderInput(startInputProps, endInputProps)\n  });\n});\nexport default DateRangePickerInput;","map":null,"metadata":{},"sourceType":"module"}