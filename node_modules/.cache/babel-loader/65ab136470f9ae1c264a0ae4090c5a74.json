{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"calendars\", \"value\", \"onChange\", \"mask\", \"startText\", \"endText\", \"inputFormat\", \"minDate\", \"maxDate\", \"PopperProps\", \"TransitionComponent\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useThemeProps } from '@material-ui/core/styles';\nimport DesktopTooltipWrapper from '../internal/pickers/wrappers/DesktopTooltipWrapper';\nimport { useUtils } from '../internal/pickers/hooks/useUtils';\nimport { useParsedDate } from '../internal/pickers/hooks/date-helpers-hooks';\nimport { defaultMinDate, defaultMaxDate } from '../internal/pickers/constants/prop-types';\nimport { useDateRangeValidation } from '../internal/pickers/hooks/useValidation';\nimport { usePickerState } from '../internal/pickers/hooks/usePickerState';\nimport { DateRangePickerView } from '../DateRangePicker/DateRangePickerView';\nimport DateRangePickerInput from '../DateRangePicker/DateRangePickerInput';\nimport { parseRangeInputValue } from '../internal/pickers/date-utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst KeyboardDateInputComponent = DateRangePickerInput;\nconst rangePickerValueManager = {\n  emptyValue: [null, null],\n  parseInput: parseRangeInputValue,\n  areValuesEqual: (utils, a, b) => utils.isEqual(a[0], b[0]) && utils.isEqual(a[1], b[1])\n};\n\n/**\r\n *\r\n * Demos:\r\n *\r\n * - [Date Range Picker](https://material-ui.com/components/date-range-picker/)\r\n *\r\n * API:\r\n *\r\n * - [DesktopDateRangePicker API](https://material-ui.com/api/desktop-date-range-picker/)\r\n */\nconst DesktopDateRangePicker = /*#__PURE__*/React.forwardRef(function DesktopDateRangePicker(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiDesktopDateRangePicker'\n  });\n  const {\n      calendars = 2,\n      value,\n      onChange,\n      mask = '__/__/____',\n      startText = 'Start',\n      endText = 'End',\n      inputFormat: passedInputFormat,\n      minDate: minDateProp = defaultMinDate,\n      maxDate: maxDateProp = defaultMaxDate,\n      PopperProps,\n      TransitionComponent\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const utils = useUtils();\n  const minDate = useParsedDate(minDateProp);\n  const maxDate = useParsedDate(maxDateProp);\n  const [currentlySelectingRangeEnd, setCurrentlySelectingRangeEnd] = React.useState('start');\n  const pickerStateProps = _extends({}, other, {\n    value,\n    onChange\n  });\n  const restProps = _extends({}, other, {\n    minDate,\n    maxDate\n  });\n  const {\n    pickerProps,\n    inputProps,\n    wrapperProps\n  } = usePickerState(pickerStateProps, rangePickerValueManager);\n  const validationError = useDateRangeValidation(props);\n  const DateInputProps = _extends({}, inputProps, restProps, {\n    currentlySelectingRangeEnd,\n    inputFormat: passedInputFormat || utils.formats.keyboardDate,\n    setCurrentlySelectingRangeEnd,\n    startText,\n    endText,\n    mask,\n    validationError,\n    ref\n  });\n  return /*#__PURE__*/_jsx(DesktopTooltipWrapper, _extends({}, wrapperProps, {\n    DateInputProps: DateInputProps,\n    KeyboardDateInputComponent: KeyboardDateInputComponent,\n    PopperProps: PopperProps,\n    TransitionComponent: TransitionComponent,\n    children: /*#__PURE__*/_jsx(DateRangePickerView, _extends({\n      open: wrapperProps.open,\n      DateInputProps: DateInputProps,\n      calendars: calendars,\n      currentlySelectingRangeEnd: currentlySelectingRangeEnd,\n      setCurrentlySelectingRangeEnd: setCurrentlySelectingRangeEnd,\n      startText: startText,\n      endText: endText\n    }, pickerProps, restProps))\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? DesktopDateRangePicker.propTypes\n/* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\r\n   * Regular expression to detect \"accepted\" symbols.\r\n   * @default /\\dap/gi\r\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n  /**\r\n   * If `true`, `onChange` is fired on click even if the same date is selected.\r\n   * @default false\r\n   */\n  allowSameDateSelection: PropTypes.bool,\n  /**\r\n   * @ignore\r\n   */\n  autoFocus: PropTypes.bool,\n  /**\r\n   * The number of calendars that render on **desktop**.\r\n   * @default 2\r\n   */\n  calendars: PropTypes.oneOf([1, 2, 3]),\n  /**\r\n   * @ignore\r\n   */\n  children: PropTypes.node,\n  /**\r\n   * className applied to the root component.\r\n   */\n  className: PropTypes.string,\n  /**\r\n   * The components used for each slot.\r\n   * Either a string to use a HTML element or a component.\r\n   * @default {}\r\n   */\n  components: PropTypes.shape({\n    LeftArrowButton: PropTypes.elementType,\n    LeftArrowIcon: PropTypes.elementType,\n    OpenPickerIcon: PropTypes.elementType,\n    RightArrowButton: PropTypes.elementType,\n    RightArrowIcon: PropTypes.elementType,\n    SwitchViewButton: PropTypes.elementType,\n    SwitchViewIcon: PropTypes.elementType\n  }),\n  /**\r\n   * The props used for each slot inside.\r\n   * @default {}\r\n   */\n  componentsProps: PropTypes.object,\n  /**\r\n   * Default calendar month displayed when `value={null}`.\r\n   */\n  defaultCalendarMonth: PropTypes.any,\n  /**\r\n   * If `true`, after selecting `start` date calendar will not automatically switch to the month of `end` date.\r\n   * @default false\r\n   */\n  disableAutoMonthSwitching: PropTypes.bool,\n  /**\r\n   * If `true` the popup or dialog will immediately close after submitting full date.\r\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\r\n   */\n  disableCloseOnSelect: PropTypes.bool,\n  /**\r\n   * If `true`, the picker and text field are disabled.\r\n   */\n  disabled: PropTypes.bool,\n  /**\r\n   * @default false\r\n   */\n  disableFuture: PropTypes.bool,\n  /**\r\n   * If `true`, todays date is rendering without highlighting with circle.\r\n   * @default false\r\n   */\n  disableHighlightToday: PropTypes.bool,\n  /**\r\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\r\n   * @default false\r\n   */\n  disableMaskedInput: PropTypes.bool,\n  /**\r\n   * Do not render open picker button (renders only text field with validation).\r\n   * @default false\r\n   */\n  disableOpenPicker: PropTypes.bool,\n  /**\r\n   * @default false\r\n   */\n  disablePast: PropTypes.bool,\n  /**\r\n   * Text for end input label and toolbar placeholder.\r\n   * @default 'End'\r\n   */\n  endText: PropTypes.node,\n  /**\r\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\r\n   * @default (value, utils) => `Choose date, selected date is ${utils.format(utils.date(value), 'fullDate')}`\r\n   */\n  getOpenDialogAriaText: PropTypes.func,\n  /**\r\n   * Get aria-label text for switching between views button.\r\n   */\n  getViewSwitchingButtonText: PropTypes.func,\n  /**\r\n   * @ignore\r\n   */\n  ignoreInvalidInputs: PropTypes.bool,\n  /**\r\n   * Props to pass to keyboard input adornment.\r\n   */\n  InputAdornmentProps: PropTypes.object,\n  /**\r\n   * Format string.\r\n   */\n  inputFormat: PropTypes.string,\n  /**\r\n   * @ignore\r\n   */\n  InputProps: PropTypes.object,\n  /**\r\n   * Pass a ref to the `input` element.\r\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n  /**\r\n   * @ignore\r\n   */\n  key: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\r\n   * @ignore\r\n   */\n  label: PropTypes.node,\n  /**\r\n   * Left arrow icon aria-label text.\r\n   */\n  leftArrowButtonText: PropTypes.string,\n  /**\r\n   * If `true` renders `LoadingComponent` in calendar instead of calendar view.\r\n   * Can be used to preload information and show it in calendar.\r\n   * @default false\r\n   */\n  loading: PropTypes.bool,\n  /**\r\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\r\n   * @default '__/__/____'\r\n   */\n  mask: PropTypes.string,\n  /**\r\n   * Max selectable date. @DateIOType\r\n   * @default defaultMaxDate\r\n   */\n  maxDate: PropTypes.any,\n  /**\r\n   * Min selectable date. @DateIOType\r\n   * @default defaultMinDate\r\n   */\n  minDate: PropTypes.any,\n  /**\r\n   * Callback fired when date is accepted @DateIOType.\r\n   */\n  onAccept: PropTypes.func,\n  /**\r\n   * Callback fired when the value (the selected date range) changes @DateIOType.\r\n   */\n  onChange: PropTypes.func.isRequired,\n  /**\r\n   * Callback fired when the popup requests to be closed.\r\n   * Use in controlled mode (see open).\r\n   */\n  onClose: PropTypes.func,\n  /**\r\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\r\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\r\n   * This can be used to render appropriate form error.\r\n   *\r\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\r\n   * @DateIOType\r\n   */\n  onError: PropTypes.func,\n  /**\r\n   * Callback firing on month change. @DateIOType\r\n   */\n  onMonthChange: PropTypes.func,\n  /**\r\n   * Callback fired when the popup requests to be opened.\r\n   * Use in controlled mode (see open).\r\n   */\n  onOpen: PropTypes.func,\n  /**\r\n   * Callback fired on view change.\r\n   */\n  onViewChange: PropTypes.func,\n  /**\r\n   * Control the popup or dialog open state.\r\n   */\n  open: PropTypes.bool,\n  /**\r\n   * Props to pass to keyboard adornment button.\r\n   */\n  OpenPickerButtonProps: PropTypes.object,\n  /**\r\n   * Force rendering in particular orientation.\r\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n  /**\r\n   * Popper props passed down to [Popper](https://material-ui.com/api/popper/) component.\r\n   */\n  PopperProps: PropTypes.object,\n  /**\r\n   * Make picker read only.\r\n   */\n  readOnly: PropTypes.bool,\n  /**\r\n   * Disable heavy animations.\r\n   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)\r\n   */\n  reduceAnimations: PropTypes.bool,\n  /**\r\n   * Custom renderer for `<DateRangePicker />` days. @DateIOType\r\n   * @example (date, dateRangePickerDayProps) => <DateRangePickerDay {...dateRangePickerDayProps} />\r\n   */\n  renderDay: PropTypes.func,\n  /**\r\n   * The `renderInput` prop allows you to customize the rendered input.\r\n   * The `startProps` and `endProps` arguments of this render prop contains props of [TextField](https://material-ui.com/api/text-field/#textfield-api),\r\n   * that you need to forward to the range start/end inputs respectively.\r\n   * Pay specific attention to the `ref` and `inputProps` keys.\r\n   * @example\r\n   * ```jsx\r\n   * <DateRangePicker\r\n   *  renderInput={(startProps, endProps) => (\r\n   *   <React.Fragment>\r\n   *     <TextField {...startProps} />\r\n   *     <Box sx={{ mx: 2 }}> to </Box>\r\n   *     <TextField {...endProps} />\r\n   *   </React.Fragment>;\r\n   *  )}\r\n   * />\r\n   * ````\r\n   */\n  renderInput: PropTypes.func.isRequired,\n  /**\r\n   * Component displaying when passed `loading` true.\r\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\r\n   */\n  renderLoading: PropTypes.func,\n  /**\r\n   * Custom formatter to be passed into Rifm component.\r\n   */\n  rifmFormatter: PropTypes.func,\n  /**\r\n   * Right arrow icon aria-label text.\r\n   */\n  rightArrowButtonText: PropTypes.string,\n  /**\r\n   * Disable specific date. @DateIOType\r\n   */\n  shouldDisableDate: PropTypes.func,\n  /**\r\n   * Disable specific years dynamically.\r\n   * Works like `shouldDisableDate` but for year selection view @DateIOType.\r\n   */\n  shouldDisableYear: PropTypes.func,\n  /**\r\n   * If `true`, days that have `outsideCurrentMonth={true}` are displayed.\r\n   * @default false\r\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n  /**\r\n   * If `true`, show the toolbar even in desktop mode.\r\n   */\n  showToolbar: PropTypes.bool,\n  /**\r\n   * Text for start input label and toolbar placeholder.\r\n   * @default 'Start'\r\n   */\n  startText: PropTypes.node,\n  /**\r\n   * Component that will replace default toolbar renderer.\r\n   */\n  ToolbarComponent: PropTypes.elementType,\n  /**\r\n   * Date format, that is displaying in toolbar.\r\n   */\n  toolbarFormat: PropTypes.string,\n  /**\r\n   * Mobile picker date value placeholder, displaying if `value` === `null`.\r\n   * @default \"–\"\r\n   */\n  toolbarPlaceholder: PropTypes.node,\n  /**\r\n   * Mobile picker title, displaying in the toolbar.\r\n   * @default \"SELECT DATE\"\r\n   */\n  toolbarTitle: PropTypes.node,\n  /**\r\n   * Custom component for popper [Transition](https://material-ui.com/components/transitions/#transitioncomponent-prop).\r\n   */\n  TransitionComponent: PropTypes.elementType,\n  /**\r\n   * The value of the date range picker.\r\n   */\n  value: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.any, PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string])).isRequired\n} : void 0;\nexport default DesktopDateRangePicker;","map":null,"metadata":{},"sourceType":"module"}