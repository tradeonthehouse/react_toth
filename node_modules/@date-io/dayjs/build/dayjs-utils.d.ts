import defaultDayjs from "dayjs";
import { IUtils, DateIOFormats, Unit } from "@date-io/core/IUtils";
interface Opts {
    locale?: string;
    /** Make sure that your dayjs instance extends customParseFormat and advancedFormat */
    instance?: typeof defaultDayjs;
    formats?: Partial<DateIOFormats>;
}
declare type Dayjs = defaultDayjs.Dayjs;
declare type Constructor = (...args: Parameters<typeof defaultDayjs>) => Dayjs;
export default class DayjsUtils implements IUtils<defaultDayjs.Dayjs> {
    rawDayJsInstance: typeof defaultDayjs;
    lib: string;
    dayjs: Constructor;
    locale?: string;
    formats: DateIOFormats;
    constructor({ locale, formats, instance }?: Opts);
    is12HourCycleInCurrentLocale: () => boolean;
    getCurrentLocaleCode: () => string;
    getFormatHelperText: (format: string) => string;
    parse: (value: any, format: any) => defaultDayjs.Dayjs;
    date: (value?: any) => defaultDayjs.Dayjs;
    toJsDate: (value: Dayjs) => Date;
    isValid: (value: any) => boolean;
    isNull: (date: Dayjs) => boolean;
    getDiff: (date: Dayjs, comparing: Dayjs, units?: Unit) => number;
    isAfter: (date: Dayjs, value: Dayjs) => boolean;
    isBefore: (date: Dayjs, value: Dayjs) => boolean;
    isAfterDay: (date: Dayjs, value: Dayjs) => boolean;
    isBeforeDay: (date: Dayjs, value: Dayjs) => boolean;
    isBeforeYear: (date: Dayjs, value: Dayjs) => boolean;
    isAfterYear: (date: Dayjs, value: Dayjs) => boolean;
    startOfDay: (date: Dayjs) => defaultDayjs.Dayjs;
    endOfDay: (date: Dayjs) => defaultDayjs.Dayjs;
    format: (date: Dayjs, formatKey: keyof DateIOFormats) => string;
    formatByString: (date: Dayjs, formatString: string) => string;
    formatNumber: (numberToFormat: string) => string;
    getHours: (date: Dayjs) => number;
    addSeconds: (date: Dayjs, count: number) => defaultDayjs.Dayjs;
    addMinutes: (date: Dayjs, count: number) => defaultDayjs.Dayjs;
    addHours: (date: Dayjs, count: number) => defaultDayjs.Dayjs;
    addDays: (date: Dayjs, count: number) => defaultDayjs.Dayjs;
    addWeeks: (date: Dayjs, count: number) => defaultDayjs.Dayjs;
    addMonths: (date: Dayjs, count: number) => defaultDayjs.Dayjs;
    setMonth: (date: Dayjs, count: number) => defaultDayjs.Dayjs;
    setHours: (date: Dayjs, count: number) => defaultDayjs.Dayjs;
    getMinutes: (date: Dayjs) => number;
    setMinutes: (date: Dayjs, count: number) => defaultDayjs.Dayjs;
    getSeconds: (date: Dayjs) => number;
    setSeconds: (date: Dayjs, count: number) => defaultDayjs.Dayjs;
    getMonth: (date: Dayjs) => number;
    getDaysInMonth: (date: Dayjs) => number;
    isSameDay: (date: Dayjs, comparing: Dayjs) => boolean;
    isSameMonth: (date: Dayjs, comparing: Dayjs) => boolean;
    isSameYear: (date: Dayjs, comparing: Dayjs) => boolean;
    isSameHour: (date: Dayjs, comparing: Dayjs) => boolean;
    getMeridiemText: (ampm: "am" | "pm") => "AM" | "PM";
    startOfMonth: (date: Dayjs) => defaultDayjs.Dayjs;
    endOfMonth: (date: Dayjs) => defaultDayjs.Dayjs;
    startOfWeek: (date: Dayjs) => defaultDayjs.Dayjs;
    endOfWeek: (date: Dayjs) => defaultDayjs.Dayjs;
    getNextMonth: (date: Dayjs) => defaultDayjs.Dayjs;
    getPreviousMonth: (date: Dayjs) => defaultDayjs.Dayjs;
    getMonthArray: (date: Dayjs) => defaultDayjs.Dayjs[];
    getYear: (date: Dayjs) => number;
    setYear: (date: Dayjs, year: number) => defaultDayjs.Dayjs;
    mergeDateAndTime: (date: Dayjs, time: Dayjs) => defaultDayjs.Dayjs;
    getWeekdays: () => string[];
    isEqual: (value: any, comparing: any) => boolean;
    getWeekArray: (date: Dayjs) => defaultDayjs.Dayjs[][];
    getYearRange: (start: Dayjs, end: Dayjs) => defaultDayjs.Dayjs[];
    isWithinRange: (date: Dayjs, [start, end]: [Dayjs, Dayjs]) => boolean;
}
export {};
